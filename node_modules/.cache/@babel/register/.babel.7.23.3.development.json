{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\tests\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"filename\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\tests\\\\bookingTests.test.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.3:development":{"value":{"code":"const {\n  describe,\n  it\n} = require('mocha');\nconst {\n  expect\n} = require('chai');\nconst sinon = require('sinon');\nconst fs = require('fs').promises;\nconst {\n  viewUserBookings,\n  addBooking,\n  updateBooking\n} = require('../utils/bookingUtil');\nconst {\n  json\n} = require('body-parser');\ndescribe('Testing viewUserBookings Function', () => {\n  const bookingsFilePath = 'utils/bookings.json';\n  var orgContent = \"\";\n  beforeEach(async () => {\n    orgContent = await fs.readFile(bookingsFilePath, 'utf8');\n    orgContent = JSON.parse(orgContent);\n  });\n  it('Should return bookings for the specified user', async () => {\n    const req = {\n      params: {\n        name: 'johnny'\n      }\n    };\n\n    // Spy on the res.json method\n    const jsonSpy = sinon.spy();\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(200);\n        return this;\n      },\n      json: jsonSpy\n    };\n    await viewUserBookings(req, res);\n\n    // Output the value of jsonSpy.firstCall.args[0] to the console for reference\n    // console.log('jsonSpy.firstCall.args[]:', jsonSpy.firstCall.args[0]);\n\n    // Assert that the spy was called with an array\n    expect(jsonSpy.calledOnce).to.be.true;\n    expect(jsonSpy.firstCall.args[0]).to.be.an('array');\n\n    // Assert that the spy was called with every element with the correct name\n    expect(jsonSpy.firstCall.args[0].every(booking => booking.name === req.params.name)).to.be.true;\n  });\n  it('Should return \"No bookings found for the specified user.\" for users with no bookings', async () => {\n    const req = {\n      params: {\n        name: 'NonExistentUser'\n      }\n    };\n\n    // Create spy for res.json\n\n    const jsonSpy = sinon.spy();\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(404);\n        return this;\n      },\n      json: jsonSpy\n    };\n    await viewUserBookings(req, res);\n\n    // Assert that json was called with the expected message\n    expect(jsonSpy.calledWith({\n      message: 'No bookings found for the specified user.'\n    })).to.be.true;\n  });\n});\ndescribe('Testing addBookings Function', () => {\n  const bookingsFilePath = 'utils/bookings.json';\n  var orgContent = \"\";\n  beforeEach(async () => {\n    orgContent = await fs.readFile(bookingsFilePath, 'utf8');\n    orgContent = JSON.parse(orgContent);\n  });\n  afterEach(async () => {\n    await fs.writeFile(bookingsFilePath, JSON.stringify(orgContent), 'utf8');\n  });\n  it('Should add a new booking successfully', async () => {\n    const req = {\n      body: {\n        name: 'johnny',\n        facility: 'Badminton Court',\n        date: '28/11/23',\n        time: '9am - 11pm'\n      }\n    };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      // Creates a stub that returns itself when called. Useful for chaining.\n      json: sinon.stub() //Creates a stub without any specific behavior.\n    };\n\n    await addBooking(req, res);\n\n    // Assert that status was called with the expected code\n    sinon.assert.calledWith(res.status, 201);\n\n    // Assert that json was called with at least one element in the array that matches the expected properties\n    sinon.assert.calledWithMatch(res.json, sinon.match.some(sinon.match({\n      name: req.body.name,\n      facility: req.body.facility,\n      date: req.body.date,\n      time: req.body.time\n    })));\n  });\n  it('Should not be able to add booking due to invalid date format or missing date', async () => {\n    const req = {\n      body: {\n        name: \"johnny\",\n        facility: 'Badminton Court',\n        date: '28/11',\n        time: '1pm - 3pm'\n      }\n    };\n    const jsonSpy = sinon.spy();\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(400);\n        return this;\n      },\n      json: jsonSpy\n    };\n    await addBooking(req, res);\n    expect(jsonSpy.calledWith({\n      message: 'Invalid date format. Please provide a valid date.'\n    })).to.be.true;\n  });\n  it('Should not be able to add booking due to invalid time format or missing time', async () => {\n    const req = {\n      body: {\n        name: \"johnny\",\n        facility: 'Badminton Court',\n        date: '28/11/23'\n      }\n    };\n    const jsonSpy = sinon.spy();\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(400);\n        return this;\n      },\n      json: jsonSpy\n    };\n    await addBooking(req, res);\n    expect(jsonSpy.calledWith({\n      message: 'Invalid time format. Please provide a valid time range.'\n    })).to.be.true;\n  });\n  it('Should not be able to add booking for facility if timing is already booked', async () => {\n    const req = {\n      //a request that is not in bookings.JSON, so we need to use stub to test the scenario\n      body: {\n        name: 'johnny',\n        facility: 'Badminton Court',\n        date: '25/12/23',\n        time: '5pm - 7pm'\n      }\n    };\n\n    // Create a stub for fs.readFile to return predefined bookings\n    //allows me to control the behavior of fs.readFile during the test, \n    //ensuring that it returns specific data I've defined rather than reading from an actual file.\n    const readFileStub = sinon.stub(fs, 'readFile');\n    readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([{\n      name: 'johnny',\n      facility: 'Badminton Court',\n      date: '25/12/23',\n      time: '5pm - 7pm'\n    }]));\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(400);\n        return this;\n      },\n      json: function (data) {\n        expect(data.message).to.equal('The chosen time for this facility is already booked by another person. Please choose another timing.');\n      }\n    };\n    await addBooking(req, res);\n\n    // Restore the original function after the test\n    readFileStub.restore();\n  });\n});\ndescribe('Testing updateBookings Function', () => {\n  const bookingsFilePath = 'utils/bookings.json';\n  var orgContent = \"\";\n  beforeEach(async () => {\n    orgContent = await fs.readFile(bookingsFilePath, 'utf8');\n    orgContent = JSON.parse(orgContent);\n  });\n  afterEach(async () => {\n    await fs.writeFile(bookingsFilePath, JSON.stringify(orgContent), 'utf8');\n  });\n  it('Should update booking successfully', async () => {\n    const req = {\n      body: {\n        facility: \"Badminton Court\",\n        date: \"25/12/23\",\n        time: \"7pm - 9pm\"\n      },\n      params: {\n        id: '12345678'\n      }\n    };\n\n    // Create a stub for fs.readFile to return predefined bookings\n    const readFileStub = sinon.stub(fs, 'readFile');\n    readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([{\n      name: 'johnny',\n      facility: 'Badminton Court',\n      date: '25/12/23',\n      time: '5pm - 7pm',\n      id: '12345678'\n    }]));\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(201);\n        return this;\n      },\n      json: function (data) {\n        expect(data.message).to.equal('Booking Updated Successfully!');\n      }\n    };\n    await updateBooking(req, res);\n\n    // Restore the original function after the test\n    readFileStub.restore();\n  });\n  it('Should not be able to update booking due to invalid date format or missing date', async () => {\n    const req = {\n      body: {\n        name: \"johnny\",\n        facility: 'Badminton Court',\n        time: '1pm - 3pm'\n      },\n      params: {\n        id: '123456789'\n      }\n    };\n\n    // Create a stub for fs.readFile to return predefined bookings\n    const readFileStub = sinon.stub(fs, 'readFile');\n    readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([{\n      name: 'johnny',\n      facility: 'Badminton Court',\n      date: '25/12/23',\n      time: '5pm - 7pm',\n      id: '123456789'\n    }]));\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(400);\n        return this;\n      },\n      json: function (data) {\n        expect(data.message).to.equal('Invalid date format. Please provide a valid date.');\n      }\n    };\n    await updateBooking(req, res);\n\n    // Restore the original function after the test\n    readFileStub.restore();\n  });\n  it('Should not be able to update booking due to invalid time format or missing time', async () => {\n    const req = {\n      body: {\n        name: \"johnny\",\n        facility: 'Badminton Court',\n        date: '28/11/23'\n      },\n      params: {\n        id: '123456789'\n      }\n    };\n\n    // Create a stub for fs.readFile to return predefined bookings\n    const readFileStub = sinon.stub(fs, 'readFile');\n    readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([{\n      name: 'johnny',\n      facility: 'Badminton Court',\n      date: '25/12/23',\n      time: '5pm - 7pm',\n      id: '123456789'\n    }]));\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(400);\n        return this;\n      },\n      json: function (data) {\n        expect(data.message).to.equal('Invalid time format. Please provide a valid time range.');\n      }\n    };\n    await updateBooking(req, res);\n\n    // Restore the original function after the test\n    readFileStub.restore();\n  });\n  it('Should not be able to update booking due to conflict with another booking', async () => {\n    const req = {\n      body: {\n        facility: \"Badminton Court\",\n        date: \"27/12/23\",\n        time: \"5pm - 7pm\"\n      },\n      params: {\n        id: '123456789'\n      }\n    };\n\n    // Create a mock for fs module\n    const fsMock = sinon.mock(fs);\n\n    // Expect readFile to be called with specific arguments and resolve with predefined bookings\n    //I expect the readFile function to be called with specific arguments, and when it is called, \n    //it should resolve with a predefined array of bookings.\n    fsMock.expects('readFile').withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([{\n      name: 'johnny',\n      facility: 'Badminton Court',\n      date: '25/12/23',\n      time: '5pm - 7pm',\n      id: '123456789'\n    }, {\n      name: 'danial',\n      facility: 'Badminton Court',\n      date: '27/12/23',\n      time: '5pm - 7pm',\n      id: '12345678910'\n    }]));\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(400);\n        return this;\n      },\n      json: function (data) {\n        expect(data.message).to.equal('The chosen time for this facility is already booked by another person. Please choose another timing.');\n      }\n    };\n    await updateBooking(req, res);\n\n    // Verify that expectations are met\n    fsMock.verify();\n\n    // Restore the original function after the test\n    fsMock.restore();\n  });\n  it('Should not be able to update booking due to invalid id', async () => {\n    const req = {\n      body: {\n        facility: \"Badminton Court\",\n        date: \"30/11/23\",\n        time: \"9am - 11am\"\n      },\n      params: {\n        id: \"1234567\"\n      }\n    };\n\n    // Create a stub for fs.readFile to return predefined bookings\n    const readFileStub = sinon.stub(fs, 'readFile');\n    readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([{\n      name: 'johnny',\n      facility: 'Badminton Court',\n      date: '25/12/23',\n      time: '5pm - 7pm',\n      id: '123456789'\n    }, {\n      name: 'danial',\n      facility: 'Badminton Court',\n      date: '27/12/23',\n      time: '5pm - 7pm',\n      id: '12345678910'\n    }]));\n    const res = {\n      status: function (code) {\n        expect(code).to.equal(500);\n        return this;\n      },\n      json: function (data) {\n        expect(data.message).to.equal('Error occurred, unable to Update!');\n      }\n    };\n    await updateBooking(req, res);\n\n    // Restore the original function after the test\n    readFileStub.restore();\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["describe","it","require","expect","sinon","fs","promises","viewUserBookings","addBooking","updateBooking","json","bookingsFilePath","orgContent","beforeEach","readFile","JSON","parse","req","params","name","jsonSpy","spy","res","status","code","to","equal","calledOnce","be","true","firstCall","args","an","every","booking","calledWith","message","afterEach","writeFile","stringify","body","facility","date","time","stub","returnsThis","assert","calledWithMatch","match","some","readFileStub","withArgs","resolves","data","restore","id","fsMock","mock","expects","verify"],"sourceRoot":"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\tests\\","sources":["bookingTests.test.js"],"sourcesContent":["const { describe, it } = require('mocha');\r\nconst { expect } = require('chai');\r\nconst sinon = require('sinon');\r\nconst fs = require('fs').promises;\r\nconst { viewUserBookings, addBooking, updateBooking } = require('../utils/bookingUtil');\r\nconst { json } = require('body-parser');\r\n\r\ndescribe('Testing viewUserBookings Function', () => {\r\n    const bookingsFilePath = 'utils/bookings.json';\r\n    var orgContent = \"\";\r\n\r\n    beforeEach(async () => {\r\n        orgContent = await fs.readFile(bookingsFilePath, 'utf8');\r\n        orgContent = JSON.parse(orgContent);\r\n    });\r\n\r\n    it('Should return bookings for the specified user', async () => {\r\n        const req = {\r\n            params: { name: 'johnny' },\r\n        };\r\n\r\n        // Spy on the res.json method\r\n        const jsonSpy = sinon.spy();\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(200);\r\n                return this;\r\n            },\r\n            json: jsonSpy,\r\n        };\r\n\r\n        await viewUserBookings(req, res);\r\n\r\n        // Output the value of jsonSpy.firstCall.args[0] to the console for reference\r\n        // console.log('jsonSpy.firstCall.args[]:', jsonSpy.firstCall.args[0]);\r\n\r\n        // Assert that the spy was called with an array\r\n        expect(jsonSpy.calledOnce).to.be.true;\r\n        expect(jsonSpy.firstCall.args[0]).to.be.an('array');\r\n\r\n        // Assert that the spy was called with every element with the correct name\r\n        expect(jsonSpy.firstCall.args[0].every(booking => booking.name === req.params.name)).to.be.true;\r\n\r\n    });\r\n\r\n    it('Should return \"No bookings found for the specified user.\" for users with no bookings', async () => {\r\n        const req = {\r\n            params: { name: 'NonExistentUser' },\r\n        };\r\n\r\n        // Create spy for res.json\r\n\r\n        const jsonSpy = sinon.spy();\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(404);\r\n                return this;\r\n            },\r\n            json: jsonSpy,\r\n        };\r\n\r\n        await viewUserBookings(req, res);\r\n\r\n        // Assert that json was called with the expected message\r\n        expect(jsonSpy.calledWith({ message: 'No bookings found for the specified user.' })).to.be.true;\r\n\r\n\r\n    });\r\n\r\n});\r\n\r\ndescribe('Testing addBookings Function', () => {\r\n    const bookingsFilePath = 'utils/bookings.json';\r\n    var orgContent = \"\";\r\n\r\n    beforeEach(async () => {\r\n        orgContent = await fs.readFile(bookingsFilePath, 'utf8');\r\n        orgContent = JSON.parse(orgContent);\r\n    });\r\n\r\n    afterEach(async () => {\r\n        await fs.writeFile(bookingsFilePath, JSON.stringify(orgContent), 'utf8');\r\n    });\r\n\r\n    it('Should add a new booking successfully', async () => {\r\n        const req = {\r\n            body: {\r\n                name: 'johnny',\r\n                facility: 'Badminton Court',\r\n                date: '28/11/23',\r\n                time: '9am - 11pm',\r\n            },\r\n        };\r\n\r\n        const res = {\r\n            status: sinon.stub().returnsThis(),  // Creates a stub that returns itself when called. Useful for chaining.\r\n            json: sinon.stub(), //Creates a stub without any specific behavior.\r\n        };\r\n\r\n        await addBooking(req, res);\r\n\r\n        // Assert that status was called with the expected code\r\n        sinon.assert.calledWith(res.status, 201);\r\n\r\n        // Assert that json was called with at least one element in the array that matches the expected properties\r\n        sinon.assert.calledWithMatch(res.json, sinon.match.some(sinon.match({\r\n            name: req.body.name,\r\n            facility: req.body.facility,\r\n            date: req.body.date,\r\n            time: req.body.time,\r\n        })));\r\n\r\n    });\r\n\r\n    it('Should not be able to add booking due to invalid date format or missing date', async () => {\r\n        const req = {\r\n            body: {\r\n                name: \"johnny\",\r\n                facility: 'Badminton Court',\r\n                date: '28/11',\r\n                time: '1pm - 3pm',\r\n            },\r\n        };\r\n\r\n        const jsonSpy = sinon.spy();\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(400);\r\n                return this;\r\n            },\r\n            json: jsonSpy,\r\n        };\r\n        await addBooking(req, res);\r\n\r\n        expect(jsonSpy.calledWith({ message: 'Invalid date format. Please provide a valid date.' })).to.be.true;\r\n    });\r\n\r\n    it('Should not be able to add booking due to invalid time format or missing time', async () => {\r\n        const req = {\r\n            body: {\r\n                name: \"johnny\",\r\n                facility: 'Badminton Court',\r\n                date: '28/11/23',\r\n\r\n            },\r\n        };\r\n\r\n        const jsonSpy = sinon.spy();\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(400);\r\n                return this;\r\n            },\r\n            json: jsonSpy,\r\n        };\r\n        await addBooking(req, res);\r\n\r\n        expect(jsonSpy.calledWith({ message: 'Invalid time format. Please provide a valid time range.' })).to.be.true;\r\n    });\r\n\r\n    it('Should not be able to add booking for facility if timing is already booked', async () => {\r\n        const req = {\r\n\r\n            //a request that is not in bookings.JSON, so we need to use stub to test the scenario\r\n            body: {\r\n                name: 'johnny',\r\n                facility: 'Badminton Court',\r\n                date: '25/12/23',\r\n                time: '5pm - 7pm',\r\n            },\r\n        };\r\n\r\n        // Create a stub for fs.readFile to return predefined bookings\r\n        //allows me to control the behavior of fs.readFile during the test, \r\n        //ensuring that it returns specific data I've defined rather than reading from an actual file.\r\n        const readFileStub = sinon.stub(fs, 'readFile');\r\n        readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([\r\n            {\r\n                name: 'johnny',\r\n                facility: 'Badminton Court',\r\n                date: '25/12/23',\r\n                time: '5pm - 7pm',\r\n            }\r\n\r\n        ]));\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(400);\r\n                return this;\r\n            },\r\n            json: function (data) {\r\n                expect(data.message).to.equal('The chosen time for this facility is already booked by another person. Please choose another timing.');\r\n            },\r\n        };\r\n\r\n        await addBooking(req, res);\r\n\r\n        // Restore the original function after the test\r\n        readFileStub.restore();\r\n    });\r\n\r\n});\r\n\r\ndescribe('Testing updateBookings Function', () => {\r\n    const bookingsFilePath = 'utils/bookings.json';\r\n    var orgContent = \"\";\r\n\r\n    beforeEach(async () => {\r\n\r\n        orgContent = await fs.readFile(bookingsFilePath, 'utf8');\r\n        orgContent = JSON.parse(orgContent);\r\n    });\r\n\r\n    afterEach(async () => {\r\n        await fs.writeFile(bookingsFilePath, JSON.stringify(orgContent), 'utf8');\r\n    });\r\n\r\n    it('Should update booking successfully', async () => {\r\n        const req = {\r\n            body: {\r\n                facility: \"Badminton Court\",\r\n                date: \"25/12/23\",\r\n                time: \"7pm - 9pm\",\r\n            },\r\n            params: {\r\n                id: '12345678'\r\n            }\r\n        };\r\n\r\n        // Create a stub for fs.readFile to return predefined bookings\r\n        const readFileStub = sinon.stub(fs, 'readFile');\r\n        readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([\r\n            {\r\n                name: 'johnny',\r\n                facility: 'Badminton Court',\r\n                date: '25/12/23',\r\n                time: '5pm - 7pm',\r\n                id: '12345678',\r\n            }\r\n\r\n        ]));\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(201);\r\n                return this;\r\n            },\r\n            json: function (data) {\r\n                expect(data.message).to.equal('Booking Updated Successfully!');\r\n            },\r\n        };\r\n\r\n        await updateBooking(req, res);\r\n\r\n        // Restore the original function after the test\r\n        readFileStub.restore();\r\n\r\n    });\r\n\r\n    it('Should not be able to update booking due to invalid date format or missing date', async () => {\r\n        const req = {\r\n            body: {\r\n                name: \"johnny\",\r\n                facility: 'Badminton Court',\r\n                time: '1pm - 3pm',\r\n            },\r\n\r\n            params: {\r\n                id: '123456789'\r\n            }\r\n        };\r\n\r\n        // Create a stub for fs.readFile to return predefined bookings\r\n        const readFileStub = sinon.stub(fs, 'readFile');\r\n        readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([\r\n            {\r\n                name: 'johnny',\r\n                facility: 'Badminton Court',\r\n                date: '25/12/23',\r\n                time: '5pm - 7pm',\r\n                id: '123456789',\r\n            }\r\n\r\n        ]));\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(400);\r\n                return this;\r\n            },\r\n            json: function (data) {\r\n                expect(data.message).to.equal('Invalid date format. Please provide a valid date.');\r\n            },\r\n        };\r\n        await updateBooking(req, res);\r\n\r\n        // Restore the original function after the test\r\n        readFileStub.restore();\r\n    });\r\n\r\n    it('Should not be able to update booking due to invalid time format or missing time', async () => {\r\n        const req = {\r\n            body: {\r\n                name: \"johnny\",\r\n                facility: 'Badminton Court',\r\n                date: '28/11/23',\r\n            },\r\n\r\n            params: {\r\n                id: '123456789'\r\n            }\r\n        };\r\n\r\n        // Create a stub for fs.readFile to return predefined bookings\r\n        const readFileStub = sinon.stub(fs, 'readFile');\r\n        readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([\r\n            {\r\n                name: 'johnny',\r\n                facility: 'Badminton Court',\r\n                date: '25/12/23',\r\n                time: '5pm - 7pm',\r\n                id: '123456789',\r\n            }\r\n\r\n        ]));\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(400);\r\n                return this;\r\n            },\r\n            json: function (data) {\r\n                expect(data.message).to.equal('Invalid time format. Please provide a valid time range.');\r\n            },\r\n        };\r\n        await updateBooking(req, res);\r\n\r\n        // Restore the original function after the test\r\n        readFileStub.restore();\r\n\r\n    });\r\n\r\n    it('Should not be able to update booking due to conflict with another booking', async () => {\r\n        const req = {\r\n            body: {\r\n                facility: \"Badminton Court\",\r\n                date: \"27/12/23\",\r\n                time: \"5pm - 7pm\",\r\n            },\r\n            params: {\r\n                id: '123456789'\r\n            }\r\n        };\r\n\r\n        // Create a mock for fs module\r\n        const fsMock = sinon.mock(fs);\r\n\r\n        // Expect readFile to be called with specific arguments and resolve with predefined bookings\r\n        //I expect the readFile function to be called with specific arguments, and when it is called, \r\n        //it should resolve with a predefined array of bookings.\r\n        fsMock.expects('readFile')\r\n            .withArgs(bookingsFilePath, 'utf8')\r\n            .resolves(JSON.stringify([\r\n                {\r\n                    name: 'johnny',\r\n                    facility: 'Badminton Court',\r\n                    date: '25/12/23',\r\n                    time: '5pm - 7pm',\r\n                    id: '123456789',\r\n                },\r\n                {\r\n                    name: 'danial',\r\n                    facility: 'Badminton Court',\r\n                    date: '27/12/23',\r\n                    time: '5pm - 7pm',\r\n                    id: '12345678910',\r\n                }\r\n            ]));\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(400);\r\n                return this;\r\n            },\r\n            json: function (data) {\r\n                expect(data.message).to.equal(\r\n                    'The chosen time for this facility is already booked by another person. Please choose another timing.'\r\n                );\r\n            },\r\n        };\r\n\r\n        await updateBooking(req, res);\r\n\r\n        // Verify that expectations are met\r\n        fsMock.verify();\r\n\r\n        // Restore the original function after the test\r\n        fsMock.restore();\r\n    });\r\n\r\n\r\n    it('Should not be able to update booking due to invalid id', async () => {\r\n        const req = {\r\n\r\n            body: {\r\n                facility: \"Badminton Court\",\r\n                date: \"30/11/23\",\r\n                time: \"9am - 11am\"\r\n\r\n            },\r\n            params: {\r\n                id: \"1234567\"\r\n            }\r\n        };\r\n\r\n        // Create a stub for fs.readFile to return predefined bookings\r\n        const readFileStub = sinon.stub(fs, 'readFile');\r\n        readFileStub.withArgs(bookingsFilePath, 'utf8').resolves(JSON.stringify([\r\n            {\r\n                name: 'johnny',\r\n                facility: 'Badminton Court',\r\n                date: '25/12/23',\r\n                time: '5pm - 7pm',\r\n                id: '123456789',\r\n            },\r\n\r\n            {\r\n                name: 'danial',\r\n                facility: 'Badminton Court',\r\n                date: '27/12/23',\r\n                time: '5pm - 7pm',\r\n                id: '12345678910',\r\n            }\r\n\r\n        ]));\r\n\r\n        const res = {\r\n            status: function (code) {\r\n                expect(code).to.equal(500);\r\n                return this;\r\n            },\r\n            json: function (data) {\r\n                expect(data.message).to.equal('Error occurred, unable to Update!');\r\n            },\r\n        };\r\n        await updateBooking(req, res);\r\n\r\n        // Restore the original function after the test\r\n        readFileStub.restore();\r\n\r\n    });\r\n});"],"mappings":"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"}},"mtime":1700999288331},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\utils\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"filename\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\utils\\\\bookingUtil.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.3:development":{"value":{"code":"const fs = require('fs').promises;\nconst {\n  Booking\n} = require('../models/Booking');\nconst {\n  readJSON,\n  writeJSON\n} = require('./userUtil');\n\n// Helper function to validate date format\nfunction isValidDateFormat(date) {\n  // Regular expression for \"Day/month/year\" format\n  const dateFormatRegex = /^\\d{1,2}\\/\\d{1,2}\\/\\d{2}$/;\n  //check if the provided date string matches the pattern defined by the regular expression dateFormatRegex.\n  return dateFormatRegex.test(date);\n}\n\n// Helper function to validate time format\nfunction isValidTimeFormat(time) {\n  // You can use a more sophisticated time validation logic if needed\n  // For simplicity, this example checks if the time has a valid format\n  return typeof time === 'string' && time.trim() !== '';\n}\nasync function viewUserBookings(req, res) {\n  const requestedUsername = req.params.name; // Getting name from the route parameter\n\n  try {\n    const allBookings = await readJSON('utils/bookings.json');\n\n    // Filter bookings based on the requested username\n    const userBookings = allBookings.filter(booking => booking.name === requestedUsername);\n    if (userBookings.length === 0) {\n      // If no bookings were found for the specified username\n      return res.status(404).json({\n        message: \"No bookings found for the specified user.\"\n      });\n    }\n    return res.status(200).json(userBookings);\n  } catch (error) {\n    return res.status(500).json({\n      message: error.message\n    });\n  }\n}\nasync function addBooking(req, res) {\n  try {\n    const allBookings = await readJSON('utils/bookings.json');\n    const name = req.body.name;\n    const facility = req.body.facility;\n    const date = req.body.date;\n    const time = req.body.time;\n\n    // Validate date format\n    if (!isValidDateFormat(date)) {\n      return res.status(400).json({\n        message: 'Invalid date format. Please provide a valid date.'\n      });\n    }\n\n    // Validate time format\n    if (!isValidTimeFormat(time)) {\n      return res.status(400).json({\n        message: 'Invalid time format. Please provide a valid time range.'\n      });\n    }\n\n    // Check if the proposed booking already exists in the JSON file\n    const bookingExists = allBookings.some(booking => booking.facility === facility && booking.date === date && booking.time === time);\n    if (bookingExists) {\n      return res.status(400).json({\n        message: 'The chosen time for this facility is already booked by another person. Please choose another timing.'\n      });\n    }\n    const newBooking = new Booking(name, facility, date, time);\n    const updatedBookings = await writeJSON(newBooking, 'utils/bookings.json');\n    return res.status(201).json(updatedBookings);\n  } catch (error) {\n    return res.status(500).json({\n      message: error.message\n    });\n  }\n}\nasync function updateBooking(req, res) {\n  try {\n    const id = req.params.id;\n    const facility = req.body.facility;\n    const date = req.body.date;\n    const time = req.body.time;\n\n    // Validate date format\n    if (!isValidDateFormat(date)) {\n      return res.status(400).json({\n        message: 'Invalid date format. Please provide a valid date.'\n      });\n    }\n\n    // Validate time format\n    if (!isValidTimeFormat(time)) {\n      return res.status(400).json({\n        message: 'Invalid time format. Please provide a valid time range.'\n      });\n    }\n    const allBookings = await readJSON('utils/bookings.json');\n    var modified = false;\n\n    // Check if the proposed changes are already booked\n    const isBookingConflict = allBookings.some(booking => booking.id !== id &&\n    // Exclude the current booking being updated\n    booking.facility === facility && booking.date === date && booking.time === time);\n    if (isBookingConflict) {\n      return res.status(400).json({\n        message: 'The chosen time for this facility is already booked by another person. Please choose another timing.'\n      });\n    }\n    for (var i = 0; i < allBookings.length; i++) {\n      var currentBooking = allBookings[i];\n      if (currentBooking.id == id) {\n        allBookings[i].facility = facility;\n        allBookings[i].date = date;\n        allBookings[i].time = time;\n        modified = true;\n      }\n    }\n    if (modified) {\n      await fs.writeFile('utils/bookings.json', JSON.stringify(allBookings), 'utf8');\n      return res.status(201).json({\n        message: 'Booking Updated Successfully!'\n      });\n    } else {\n      return res.status(500).json({\n        message: 'Error occurred, unable to Update!'\n      });\n    }\n  } catch (error) {\n    return res.status(500).json({\n      message: error.message\n    });\n  }\n}\nmodule.exports = {\n  viewUserBookings,\n  addBooking,\n  updateBooking\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwcm9taXNlcyIsIkJvb2tpbmciLCJyZWFkSlNPTiIsIndyaXRlSlNPTiIsImlzVmFsaWREYXRlRm9ybWF0IiwiZGF0ZSIsImRhdGVGb3JtYXRSZWdleCIsInRlc3QiLCJpc1ZhbGlkVGltZUZvcm1hdCIsInRpbWUiLCJ0cmltIiwidmlld1VzZXJCb29raW5ncyIsInJlcSIsInJlcyIsInJlcXVlc3RlZFVzZXJuYW1lIiwicGFyYW1zIiwibmFtZSIsImFsbEJvb2tpbmdzIiwidXNlckJvb2tpbmdzIiwiZmlsdGVyIiwiYm9va2luZyIsImxlbmd0aCIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwiZXJyb3IiLCJhZGRCb29raW5nIiwiYm9keSIsImZhY2lsaXR5IiwiYm9va2luZ0V4aXN0cyIsInNvbWUiLCJuZXdCb29raW5nIiwidXBkYXRlZEJvb2tpbmdzIiwidXBkYXRlQm9va2luZyIsImlkIiwibW9kaWZpZWQiLCJpc0Jvb2tpbmdDb25mbGljdCIsImkiLCJjdXJyZW50Qm9va2luZyIsIndyaXRlRmlsZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXHRlaWppXFxUUCBZZWFyIDItMyBDb2RpbmcgUHJvamVjdHNcXERldk9wcyBZMlxcQm9va0xhaFxcdXRpbHNcXCIsInNvdXJjZXMiOlsiYm9va2luZ1V0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpLnByb21pc2VzO1xyXG5jb25zdCB7IEJvb2tpbmcgfSA9IHJlcXVpcmUoJy4uL21vZGVscy9Cb29raW5nJyk7XHJcbmNvbnN0IHsgcmVhZEpTT04sIHdyaXRlSlNPTiB9ID0gcmVxdWlyZSgnLi91c2VyVXRpbCcpXHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gdmFsaWRhdGUgZGF0ZSBmb3JtYXRcclxuZnVuY3Rpb24gaXNWYWxpZERhdGVGb3JtYXQoZGF0ZSkge1xyXG5cclxuICAgIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgXCJEYXkvbW9udGgveWVhclwiIGZvcm1hdFxyXG4gICAgY29uc3QgZGF0ZUZvcm1hdFJlZ2V4ID0gL15cXGR7MSwyfVxcL1xcZHsxLDJ9XFwvXFxkezJ9JC87XHJcbiAgICAvL2NoZWNrIGlmIHRoZSBwcm92aWRlZCBkYXRlIHN0cmluZyBtYXRjaGVzIHRoZSBwYXR0ZXJuIGRlZmluZWQgYnkgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBkYXRlRm9ybWF0UmVnZXguXHJcbiAgICByZXR1cm4gZGF0ZUZvcm1hdFJlZ2V4LnRlc3QoZGF0ZSk7XHJcbn1cclxuXHJcbi8vIEhlbHBlciBmdW5jdGlvbiB0byB2YWxpZGF0ZSB0aW1lIGZvcm1hdFxyXG5mdW5jdGlvbiBpc1ZhbGlkVGltZUZvcm1hdCh0aW1lKSB7XHJcbiAgICAvLyBZb3UgY2FuIHVzZSBhIG1vcmUgc29waGlzdGljYXRlZCB0aW1lIHZhbGlkYXRpb24gbG9naWMgaWYgbmVlZGVkXHJcbiAgICAvLyBGb3Igc2ltcGxpY2l0eSwgdGhpcyBleGFtcGxlIGNoZWNrcyBpZiB0aGUgdGltZSBoYXMgYSB2YWxpZCBmb3JtYXRcclxuICAgIHJldHVybiB0eXBlb2YgdGltZSA9PT0gJ3N0cmluZycgJiYgdGltZS50cmltKCkgIT09ICcnO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiB2aWV3VXNlckJvb2tpbmdzKHJlcSwgcmVzKSB7XHJcblxyXG4gICAgY29uc3QgcmVxdWVzdGVkVXNlcm5hbWUgPSByZXEucGFyYW1zLm5hbWU7IC8vIEdldHRpbmcgbmFtZSBmcm9tIHRoZSByb3V0ZSBwYXJhbWV0ZXJcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGFsbEJvb2tpbmdzID0gYXdhaXQgcmVhZEpTT04oJ3V0aWxzL2Jvb2tpbmdzLmpzb24nKTtcclxuXHJcbiAgICAgICAgLy8gRmlsdGVyIGJvb2tpbmdzIGJhc2VkIG9uIHRoZSByZXF1ZXN0ZWQgdXNlcm5hbWVcclxuICAgICAgICBjb25zdCB1c2VyQm9va2luZ3MgPSBhbGxCb29raW5ncy5maWx0ZXIoYm9va2luZyA9PiBib29raW5nLm5hbWUgPT09IHJlcXVlc3RlZFVzZXJuYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKHVzZXJCb29raW5ncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgLy8gSWYgbm8gYm9va2luZ3Mgd2VyZSBmb3VuZCBmb3IgdGhlIHNwZWNpZmllZCB1c2VybmFtZVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiBcIk5vIGJvb2tpbmdzIGZvdW5kIGZvciB0aGUgc3BlY2lmaWVkIHVzZXIuXCIgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24odXNlckJvb2tpbmdzKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuICAgIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gYWRkQm9va2luZyhyZXEsIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBhbGxCb29raW5ncyA9IGF3YWl0IHJlYWRKU09OKCd1dGlscy9ib29raW5ncy5qc29uJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5hbWUgPSByZXEuYm9keS5uYW1lO1xyXG4gICAgICAgIGNvbnN0IGZhY2lsaXR5ID0gcmVxLmJvZHkuZmFjaWxpdHk7XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IHJlcS5ib2R5LmRhdGU7XHJcbiAgICAgICAgY29uc3QgdGltZSA9IHJlcS5ib2R5LnRpbWU7XHJcblxyXG4gICAgICAgIC8vIFZhbGlkYXRlIGRhdGUgZm9ybWF0XHJcbiAgICAgICAgaWYgKCFpc1ZhbGlkRGF0ZUZvcm1hdChkYXRlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBkYXRlIGZvcm1hdC4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBkYXRlLicgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBWYWxpZGF0ZSB0aW1lIGZvcm1hdFxyXG4gICAgICAgIGlmICghaXNWYWxpZFRpbWVGb3JtYXQodGltZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgdGltZSBmb3JtYXQuIFBsZWFzZSBwcm92aWRlIGEgdmFsaWQgdGltZSByYW5nZS4nIH0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBwcm9wb3NlZCBib29raW5nIGFscmVhZHkgZXhpc3RzIGluIHRoZSBKU09OIGZpbGVcclxuICAgICAgICBjb25zdCBib29raW5nRXhpc3RzID0gYWxsQm9va2luZ3Muc29tZShcclxuICAgICAgICAgICAgKGJvb2tpbmcpID0+XHJcbiAgICAgICAgICAgICAgICBib29raW5nLmZhY2lsaXR5ID09PSBmYWNpbGl0eSAmJlxyXG4gICAgICAgICAgICAgICAgYm9va2luZy5kYXRlID09PSBkYXRlICYmXHJcbiAgICAgICAgICAgICAgICBib29raW5nLnRpbWUgPT09IHRpbWVcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoYm9va2luZ0V4aXN0cykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICAgICAgICAgICAgICAgICAgICAnVGhlIGNob3NlbiB0aW1lIGZvciB0aGlzIGZhY2lsaXR5IGlzIGFscmVhZHkgYm9va2VkIGJ5IGFub3RoZXIgcGVyc29uLiBQbGVhc2UgY2hvb3NlIGFub3RoZXIgdGltaW5nLicsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbmV3Qm9va2luZyA9IG5ldyBCb29raW5nKG5hbWUsIGZhY2lsaXR5LCBkYXRlLCB0aW1lKTtcclxuXHJcbiAgICAgICAgY29uc3QgdXBkYXRlZEJvb2tpbmdzID0gYXdhaXQgd3JpdGVKU09OKG5ld0Jvb2tpbmcsICd1dGlscy9ib29raW5ncy5qc29uJyk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih1cGRhdGVkQm9va2luZ3MpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVCb29raW5nKHJlcSwgcmVzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGlkID0gcmVxLnBhcmFtcy5pZDtcclxuICAgICAgICBjb25zdCBmYWNpbGl0eSA9IHJlcS5ib2R5LmZhY2lsaXR5O1xyXG4gICAgICAgIGNvbnN0IGRhdGUgPSByZXEuYm9keS5kYXRlO1xyXG4gICAgICAgIGNvbnN0IHRpbWUgPSByZXEuYm9keS50aW1lO1xyXG5cclxuICAgICAgICAgLy8gVmFsaWRhdGUgZGF0ZSBmb3JtYXRcclxuICAgICAgICAgaWYgKCFpc1ZhbGlkRGF0ZUZvcm1hdChkYXRlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBkYXRlIGZvcm1hdC4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBkYXRlLicgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBWYWxpZGF0ZSB0aW1lIGZvcm1hdFxyXG4gICAgICAgIGlmICghaXNWYWxpZFRpbWVGb3JtYXQodGltZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgdGltZSBmb3JtYXQuIFBsZWFzZSBwcm92aWRlIGEgdmFsaWQgdGltZSByYW5nZS4nIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBhbGxCb29raW5ncyA9IGF3YWl0IHJlYWRKU09OKCd1dGlscy9ib29raW5ncy5qc29uJyk7XHJcbiAgICAgICAgdmFyIG1vZGlmaWVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBwcm9wb3NlZCBjaGFuZ2VzIGFyZSBhbHJlYWR5IGJvb2tlZFxyXG4gICAgICAgIGNvbnN0IGlzQm9va2luZ0NvbmZsaWN0ID0gYWxsQm9va2luZ3Muc29tZShcclxuICAgICAgICAgICAgKGJvb2tpbmcpID0+XHJcbiAgICAgICAgICAgICAgICBib29raW5nLmlkICE9PSBpZCAmJiAvLyBFeGNsdWRlIHRoZSBjdXJyZW50IGJvb2tpbmcgYmVpbmcgdXBkYXRlZFxyXG4gICAgICAgICAgICAgICAgYm9va2luZy5mYWNpbGl0eSA9PT0gZmFjaWxpdHkgJiZcclxuICAgICAgICAgICAgICAgIGJvb2tpbmcuZGF0ZSA9PT0gZGF0ZSAmJlxyXG4gICAgICAgICAgICAgICAgYm9va2luZy50aW1lID09PSB0aW1lXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKGlzQm9va2luZ0NvbmZsaWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOlxyXG4gICAgICAgICAgICAgICAgICAgICdUaGUgY2hvc2VuIHRpbWUgZm9yIHRoaXMgZmFjaWxpdHkgaXMgYWxyZWFkeSBib29rZWQgYnkgYW5vdGhlciBwZXJzb24uIFBsZWFzZSBjaG9vc2UgYW5vdGhlciB0aW1pbmcuJyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbEJvb2tpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50Qm9va2luZyA9IGFsbEJvb2tpbmdzW2ldO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudEJvb2tpbmcuaWQgPT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIGFsbEJvb2tpbmdzW2ldLmZhY2lsaXR5ID0gZmFjaWxpdHk7XHJcbiAgICAgICAgICAgICAgICBhbGxCb29raW5nc1tpXS5kYXRlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgIGFsbEJvb2tpbmdzW2ldLnRpbWUgPSB0aW1lO1xyXG4gICAgICAgICAgICAgICAgbW9kaWZpZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobW9kaWZpZWQpIHtcclxuICAgICAgICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKCd1dGlscy9ib29raW5ncy5qc29uJywgSlNPTi5zdHJpbmdpZnkoYWxsQm9va2luZ3MpLCAndXRmOCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBtZXNzYWdlOiAnQm9va2luZyBVcGRhdGVkIFN1Y2Nlc3NmdWxseSEnIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdFcnJvciBvY2N1cnJlZCwgdW5hYmxlIHRvIFVwZGF0ZSEnIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0geyB2aWV3VXNlckJvb2tpbmdzLCBhZGRCb29raW5nLCB1cGRhdGVCb29raW5nIH1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJLENB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","map":{"version":3,"names":["fs","require","promises","Booking","readJSON","writeJSON","isValidDateFormat","date","dateFormatRegex","test","isValidTimeFormat","time","trim","viewUserBookings","req","res","requestedUsername","params","name","allBookings","userBookings","filter","booking","length","status","json","message","error","addBooking","body","facility","bookingExists","some","newBooking","updatedBookings","updateBooking","id","modified","isBookingConflict","i","currentBooking","writeFile","JSON","stringify","module","exports"],"sourceRoot":"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\utils\\","sources":["bookingUtil.js"],"sourcesContent":["const fs = require('fs').promises;\r\nconst { Booking } = require('../models/Booking');\r\nconst { readJSON, writeJSON } = require('./userUtil')\r\n\r\n// Helper function to validate date format\r\nfunction isValidDateFormat(date) {\r\n\r\n    // Regular expression for \"Day/month/year\" format\r\n    const dateFormatRegex = /^\\d{1,2}\\/\\d{1,2}\\/\\d{2}$/;\r\n    //check if the provided date string matches the pattern defined by the regular expression dateFormatRegex.\r\n    return dateFormatRegex.test(date);\r\n}\r\n\r\n// Helper function to validate time format\r\nfunction isValidTimeFormat(time) {\r\n    // You can use a more sophisticated time validation logic if needed\r\n    // For simplicity, this example checks if the time has a valid format\r\n    return typeof time === 'string' && time.trim() !== '';\r\n}\r\n\r\nasync function viewUserBookings(req, res) {\r\n\r\n    const requestedUsername = req.params.name; // Getting name from the route parameter\r\n\r\n    try {\r\n        const allBookings = await readJSON('utils/bookings.json');\r\n\r\n        // Filter bookings based on the requested username\r\n        const userBookings = allBookings.filter(booking => booking.name === requestedUsername);\r\n\r\n        if (userBookings.length === 0) {\r\n            // If no bookings were found for the specified username\r\n            return res.status(404).json({ message: \"No bookings found for the specified user.\" });\r\n        }\r\n\r\n        return res.status(200).json(userBookings);\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\n\r\nasync function addBooking(req, res) {\r\n    try {\r\n        const allBookings = await readJSON('utils/bookings.json');\r\n\r\n        const name = req.body.name;\r\n        const facility = req.body.facility;\r\n        const date = req.body.date;\r\n        const time = req.body.time;\r\n\r\n        // Validate date format\r\n        if (!isValidDateFormat(date)) {\r\n            return res.status(400).json({ message: 'Invalid date format. Please provide a valid date.' });\r\n        }\r\n\r\n        // Validate time format\r\n        if (!isValidTimeFormat(time)) {\r\n            return res.status(400).json({ message: 'Invalid time format. Please provide a valid time range.' });\r\n        }\r\n\r\n\r\n        // Check if the proposed booking already exists in the JSON file\r\n        const bookingExists = allBookings.some(\r\n            (booking) =>\r\n                booking.facility === facility &&\r\n                booking.date === date &&\r\n                booking.time === time\r\n        );\r\n\r\n        if (bookingExists) {\r\n            return res.status(400).json({\r\n                message:\r\n                    'The chosen time for this facility is already booked by another person. Please choose another timing.',\r\n            });\r\n        }\r\n\r\n        const newBooking = new Booking(name, facility, date, time);\r\n\r\n        const updatedBookings = await writeJSON(newBooking, 'utils/bookings.json');\r\n\r\n        return res.status(201).json(updatedBookings);\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\n\r\nasync function updateBooking(req, res) {\r\n    try {\r\n        const id = req.params.id;\r\n        const facility = req.body.facility;\r\n        const date = req.body.date;\r\n        const time = req.body.time;\r\n\r\n         // Validate date format\r\n         if (!isValidDateFormat(date)) {\r\n            return res.status(400).json({ message: 'Invalid date format. Please provide a valid date.' });\r\n        }\r\n\r\n        // Validate time format\r\n        if (!isValidTimeFormat(time)) {\r\n            return res.status(400).json({ message: 'Invalid time format. Please provide a valid time range.' });\r\n        }\r\n        \r\n        const allBookings = await readJSON('utils/bookings.json');\r\n        var modified = false;\r\n\r\n        // Check if the proposed changes are already booked\r\n        const isBookingConflict = allBookings.some(\r\n            (booking) =>\r\n                booking.id !== id && // Exclude the current booking being updated\r\n                booking.facility === facility &&\r\n                booking.date === date &&\r\n                booking.time === time\r\n        );\r\n\r\n        if (isBookingConflict) {\r\n            return res.status(400).json({\r\n                message:\r\n                    'The chosen time for this facility is already booked by another person. Please choose another timing.',\r\n            });\r\n        }\r\n\r\n        for (var i = 0; i < allBookings.length; i++) {\r\n            var currentBooking = allBookings[i];\r\n            if (currentBooking.id == id) {\r\n                allBookings[i].facility = facility;\r\n                allBookings[i].date = date;\r\n                allBookings[i].time = time;\r\n                modified = true;\r\n            }\r\n        }\r\n\r\n        if (modified) {\r\n            await fs.writeFile('utils/bookings.json', JSON.stringify(allBookings), 'utf8');\r\n            return res.status(201).json({ message: 'Booking Updated Successfully!' });\r\n        } else {\r\n            return res.status(500).json({ message: 'Error occurred, unable to Update!' });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = { viewUserBookings, addBooking, updateBooking }\r\n"],"mappings":"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"}},"mtime":1700999288334},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\models\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"filename\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\models\\\\Booking.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.3:development":{"value":{"code":"class Booking {\n  constructor(name, facility, date, time) {\n    this.name = name;\n    this.facility = facility;\n    this.date = date;\n    this.time = time;\n    const timestamp = new Date().getTime();\n    const random = Math.floor(Math.random() * 1000);\n    this.id = timestamp + \"\" + random.toString().padStart(3, '0');\n  }\n}\nmodule.exports = {\n  Booking\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29raW5nIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZmFjaWxpdHkiLCJkYXRlIiwidGltZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJnZXRUaW1lIiwicmFuZG9tIiwiTWF0aCIsImZsb29yIiwiaWQiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFx0ZWlqaVxcVFAgWWVhciAyLTMgQ29kaW5nIFByb2plY3RzXFxEZXZPcHMgWTJcXEJvb2tMYWhcXG1vZGVsc1xcIiwic291cmNlcyI6WyJCb29raW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEJvb2tpbmcge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgZmFjaWxpdHksIGRhdGUsIHRpbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZmFjaWxpdHkgPSBmYWNpbGl0eTtcclxuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlO1xyXG4gICAgICAgIHRoaXMudGltZSA9IHRpbWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGNvbnN0IHJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDApO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aW1lc3RhbXAgKyBcIlwiICsgcmFuZG9tLnRvU3RyaW5nKCkucGFkU3RhcnQoMywgJzAnKTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7Qm9va2luZ307Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLENBQUM7RUFDVkMsV0FBV0EsQ0FBQ0MsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFO0lBQ3BDLElBQUksQ0FBQ0gsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsSUFBSSxHQUFHQSxJQUFJO0lBRWhCLE1BQU1DLFNBQVMsR0FBRyxJQUFJQyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxNQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNELE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQy9DLElBQUksQ0FBQ0csRUFBRSxHQUFHTixTQUFTLEdBQUcsRUFBRSxHQUFHRyxNQUFNLENBQUNJLFFBQVEsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ2pFO0FBQ0o7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFBQ2hCO0FBQU8sQ0FBQyJ9","map":{"version":3,"names":["Booking","constructor","name","facility","date","time","timestamp","Date","getTime","random","Math","floor","id","toString","padStart","module","exports"],"sourceRoot":"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\models\\","sources":["Booking.js"],"sourcesContent":["class Booking {\r\n    constructor(name, facility, date, time) {\r\n        this.name = name;\r\n        this.facility = facility;\r\n        this.date = date;\r\n        this.time = time;\r\n\r\n        const timestamp = new Date().getTime();\r\n        const random = Math.floor(Math.random() * 1000);\r\n        this.id = timestamp + \"\" + random.toString().padStart(3, '0');\r\n    }\r\n}\r\n\r\nmodule.exports = {Booking};"],"mappings":"AAAA,MAAMA,OAAO,CAAC;EACVC,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACpC,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAEhB,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACtC,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACD,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;IAC/C,IAAI,CAACG,EAAE,GAAGN,SAAS,GAAG,EAAE,GAAGG,MAAM,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACjE;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAG;EAAChB;AAAO,CAAC"}},"mtime":1700907095744},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\utils\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"filename\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\utils\\\\userUtil.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.3:development":{"value":{"code":"const {\n  User\n} = require('../models/User');\nconst fs = require('fs').promises;\nasync function readJSON(filename) {\n  try {\n    const data = await fs.readFile(filename, 'utf8');\n    return JSON.parse(data);\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n}\nasync function writeJSON(object, filename) {\n  try {\n    const allObjects = await readJSON(filename);\n    allObjects.push(object);\n    await fs.writeFile(filename, JSON.stringify(allObjects), 'utf8');\n    return allObjects;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n}\nasync function register(req, res) {\n  try {\n    const email = req.body.email;\n    const username = req.body.username;\n    const password = req.body.password;\n    if (!email.includes('@') || !email.includes('.') || password.length < 6) {\n      return res.status(500).json({\n        message: 'Validation error'\n      });\n    } else if (username.length < 6) {\n      return res.status(500).json({\n        message: 'Username must be at least 6 characters long'\n      });\n    } else {\n      const newUser = new User(email, username, password);\n      const updatedUsers = await writeJSON(newUser, 'utils/users.json');\n      return res.status(201).json(updatedUsers);\n    }\n  } catch (error) {\n    return res.status(500).json({\n      message: error.message\n    });\n  }\n}\nasync function login(req, res) {\n  try {\n    const email = req.body.email;\n    const password = req.body.password;\n    const allUsers = await readJSON('utils/users.json');\n    var validCredentials = false;\n    for (var i = 0; i < allUsers.length; i++) {\n      var nowUser = allUsers[i];\n      if (nowUser.email == email && nowUser.password == password) validCredentials = true;\n    }\n    if (validCredentials) {\n      return res.status(201).json({\n        message: 'Login successful!'\n      });\n    } else {\n      return res.status(500).json({\n        message: 'Invalid credentials!'\n      });\n    }\n  } catch (error) {\n    return res.status(500).json({\n      message: error.message\n    });\n  }\n}\nasync function getAllUsers(req, res) {\n  try {\n    const allResources = await readJSON('utils/users.json');\n    return res.status(201).json(allResources);\n  } catch (error) {\n    return res.status(500).json({\n      message: error.message\n    });\n  }\n}\nmodule.exports = {\n  readJSON,\n  writeJSON,\n  register,\n  login,\n  getAllUsers\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["User","require","fs","promises","readJSON","filename","data","readFile","JSON","parse","err","console","error","writeJSON","object","allObjects","push","writeFile","stringify","register","req","res","email","body","username","password","includes","length","status","json","message","newUser","updatedUsers","login","allUsers","validCredentials","i","nowUser","getAllUsers","allResources","module","exports"],"sourceRoot":"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\utils\\","sources":["userUtil.js"],"sourcesContent":["const {User}=require('../models/User');\r\nconst fs = require('fs').promises;\r\n\r\nasync function readJSON(filename){\r\n    try{\r\n        const data =await fs.readFile(filename, 'utf8');\r\n        return JSON.parse(data);\r\n    }catch(err){console.error(err);throw err;}\r\n}\r\n\r\nasync function writeJSON(object,filename){\r\n    try{\r\n        const allObjects=await readJSON(filename);\r\n        allObjects.push(object);\r\n\r\n        await fs.writeFile(filename,JSON.stringify(allObjects),'utf8');\r\n        return allObjects;\r\n    }catch(err){console.error(err);throw err;}\r\n}\r\nasync function register(req, res) {\r\n    try {\r\n        const email = req.body.email;\r\n        const username = req.body.username;\r\n        const password = req.body.password;\r\n        \r\n        if (!email.includes('@') || !email.includes('.') || password.length < 6) {\r\n            return res.status(500).json({ message: 'Validation error' });\r\n        } else if (username.length < 6) {\r\n            return res.status(500).json({ message: 'Username must be at least 6 characters long' });\r\n        } else {\r\n            const newUser = new User(email,username, password);\r\n            const updatedUsers = await writeJSON(newUser, 'utils/users.json');\r\n            return res.status(201).json(updatedUsers);\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\nasync function login(req, res) {\r\n    try {\r\n        const email = req.body.email;\r\n        const password = req.body.password;\r\n        const allUsers = await readJSON('utils/users.json');\r\n        var validCredentials = false;\r\n        for (var i = 0; i < allUsers.length; i++) {\r\n            var nowUser = allUsers[i];\r\n            if (nowUser.email == email && nowUser.password == password)\r\n            validCredentials = true;\r\n        }\r\n        if (validCredentials) {\r\n            return res.status(201).json({ message: 'Login successful!' });\r\n        } else {\r\n            return res.status(500).json({ message: 'Invalid credentials!' });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\nasync function getAllUsers(req, res) {\r\n    try {\r\n      const allResources = await readJSON('utils/users.json');\r\n      return res.status(201).json(allResources);\r\n    } catch (error) {\r\n      return res.status(500).json({ message: error.message });\r\n    }\r\n  }\r\nmodule.exports={\r\n    readJSON,writeJSON,register,login,getAllUsers\r\n}\r\n"],"mappings":"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"}},"mtime":1700999288341},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\models\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"filename\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\\\\models\\\\User.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\teiji\\\\TP Year 2-3 Coding Projects\\\\DevOps Y2\\\\BookLah\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.3:development":{"value":{"code":"class User {\n  constructor(email, username, password) {\n    this.email = email;\n    this.username = username;\n    this.password = password;\n  }\n}\nmodule.exports = {\n  User\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVc2VyIiwiY29uc3RydWN0b3IiLCJlbWFpbCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXHRlaWppXFxUUCBZZWFyIDItMyBDb2RpbmcgUHJvamVjdHNcXERldk9wcyBZMlxcQm9va0xhaFxcbW9kZWxzXFwiLCJzb3VyY2VzIjpbIlVzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVXNlcntcclxuICAgIGNvbnN0cnVjdG9yKGVtYWlsLHVzZXJuYW1lLHBhc3N3b3JkKXtcclxuICAgICAgICB0aGlzLmVtYWlsPWVtYWlsO1xyXG4gICAgICAgIHRoaXMudXNlcm5hbWU9dXNlcm5hbWU7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZD1wYXNzd29yZDtcclxuICAgIH1cclxufVxyXG5tb2R1bGUuZXhwb3J0cz17VXNlcn07Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJO0VBQ05DLFdBQVdBLENBQUNDLEtBQUssRUFBQ0MsUUFBUSxFQUFDQyxRQUFRLEVBQUM7SUFDaEMsSUFBSSxDQUFDRixLQUFLLEdBQUNBLEtBQUs7SUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUNBLFFBQVE7SUFDdEIsSUFBSSxDQUFDQyxRQUFRLEdBQUNBLFFBQVE7RUFDMUI7QUFDSjtBQUNBQyxNQUFNLENBQUNDLE9BQU8sR0FBQztFQUFDTjtBQUFJLENBQUMifQ==","map":{"version":3,"names":["User","constructor","email","username","password","module","exports"],"sourceRoot":"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\models\\","sources":["User.js"],"sourcesContent":["class User{\r\n    constructor(email,username,password){\r\n        this.email=email;\r\n        this.username=username;\r\n        this.password=password;\r\n    }\r\n}\r\nmodule.exports={User};"],"mappings":"AAAA,MAAMA,IAAI;EACNC,WAAWA,CAACC,KAAK,EAACC,QAAQ,EAACC,QAAQ,EAAC;IAChC,IAAI,CAACF,KAAK,GAACA,KAAK;IAChB,IAAI,CAACC,QAAQ,GAACA,QAAQ;IACtB,IAAI,CAACC,QAAQ,GAACA,QAAQ;EAC1B;AACJ;AACAC,MAAM,CAACC,OAAO,GAAC;EAACN;AAAI,CAAC"}},"mtime":1700406385490}}