{"version":3,"names":["Reviews","require","fs","promises","readJSON","writeJSON","viewUserReviews","req","res","username","params","users","userExists","some","user","status","json","message","allReviews","reviewsByUser","filter","review","error","console","viewReviewByFacility","facilityId","parseInt","facilities","facilityExists","facility","reviewsForFacility","addReview","body","reviewBody","reviews","existingReview","find","newReview","push","updatedReview","editReview","reviewText","trim","reviewIndex","findIndex","datePosted","Date","toISOString","substring","writeFile","JSON","stringify","module","exports"],"sourceRoot":"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\utils\\","sources":["reviewsUtil.js"],"sourcesContent":["const { Reviews } = require('../models/Reviews');\r\nconst fs = require('fs').promises;\r\nconst { readJSON, writeJSON } = require('./userUtil');\r\n\r\nasync function viewUserReviews(req, res) {\r\n    try {\r\n        const username = req.params.username; // Ensure the param name matches your route definition\r\n        \r\n        // Check if the user exists\r\n        const users = await readJSON('utils/users.json');\r\n        const userExists = users.some(user => user.username === username);\r\n\r\n        if (!userExists) {\r\n            // If the user doesn't exist, return a 404 Not Found\r\n            return res.status(404).json({ message: 'User not found.' });\r\n        }\r\n\r\n        const allReviews = await readJSON('utils/reviews.json');\r\n        const reviewsByUser = allReviews.filter(review => review.username === username);\r\n\r\n        // If there are no reviews for the user, return an empty array with a 200 OK status\r\n        return res.status(200).json(reviewsByUser);\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return res.status(500).json({ message: \"An error occurred while retrieving the user's reviews.\" });\r\n    }\r\n}\r\n\r\n\r\nasync function viewReviewByFacility(req, res) {\r\n    try {\r\n        const facilityId = parseInt(req.params.facilityId); // Convert to integer\r\n\r\n        // Check if the facility exists\r\n        const facilities = await readJSON('utils/facilities.json');\r\n        const facilityExists = facilities.some(facility => facility.facilityId === facilityId);\r\n\r\n        if (!facilityExists) {\r\n            // If the facility doesn't exist, return a 404 Not Found\r\n            return res.status(404).json({ message: 'Facility not found.' });\r\n        }\r\n\r\n        const allReviews = await readJSON('utils/reviews.json');\r\n        const reviewsForFacility = allReviews.filter(review => review.facilityId === facilityId);\r\n\r\n        // If there are no reviews for the facility, return an empty array with a 200 OK status\r\n        return res.status(200).json(reviewsForFacility);\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\n\r\nasync function addReview(req, res) {\r\n    try {\r\n        // Retrieve review data from request body\r\n        const facilityId = parseInt(req.body.facilityId);\r\n        const { username, review: reviewBody } = req.body;\r\n\r\n        // Check for a valid user\r\n        const users = await readJSON('utils/users.json');\r\n        const userExists = users.some(user => user.username === username);\r\n        if (!userExists) {\r\n            return res.status(400).json({ message: \"Invalid user. Review could not be added.\" });\r\n        }\r\n\r\n        if (!facilityId || !username || !reviewBody) {\r\n            return res.status(400).json({ message: \"All fields must be provided.\" });\r\n        }\r\n\r\n        // Check for a valid facility\r\n        const facilities = await readJSON('utils/facilities.json');\r\n        const facilityExists = facilities.some(facility => facility.facilityId === facilityId); // Corrected property name\r\n        if (!facilityExists) {\r\n            return res.status(400).json({ message: \"Invalid facility. Review could not be added.\" });\r\n        }\r\n\r\n        // Read the existing reviews\r\n        const reviews = await readJSON('utils/reviews.json');\r\n\r\n        // Check if the user has already made a review for the facility\r\n        const existingReview = reviews.find(review => review.username === username && review.facilityId === facilityId);\r\n        if (existingReview) {\r\n            return res.status(400).json({ message: \"User has already made a review for this facility.\" });\r\n        }\r\n\r\n        const newReview = new Reviews(facilityId, username, reviewBody);\r\n        // Create a new review instance and add it to the array\r\n        reviews.push(newReview);\r\n        // Save the updated reviews back to the JSON file\r\n        const updatedReview = await writeJSON(newReview, 'utils/reviews.json');\r\n        // Return the new review as the response\r\n\r\n        return res.status(201).json(updatedReview);\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return res.status(500).json({ message: \"An error occurred while adding the review.\" });\r\n    }\r\n}\r\n\r\nasync function editReview(req, res) {\r\n    try {\r\n        const facilityId = req.body.facilityId;\r\n        const username = req.body.username;\r\n        const reviewText = req.body.review;\r\n\r\n        // Check if the review text is empty and return an error if so\r\n        if (!reviewText.trim()) {\r\n            return res.status(400).json({ message: 'Review text cannot be empty.' });\r\n        }\r\n\r\n        const allReviews = await readJSON('utils/reviews.json');\r\n\r\n        const reviewIndex = allReviews.findIndex(review => \r\n            review.facilityId === facilityId && review.username === username\r\n        );\r\n\r\n        if (reviewIndex === -1) {\r\n            // Check if a review by the user for the facility does not exist\r\n            return res.status(404).json({ message: 'Review does not exist.' });\r\n        }\r\n\r\n        // Update the review properties\r\n        allReviews[reviewIndex].review = reviewText;\r\n        allReviews[reviewIndex].datePosted = new Date().toISOString().substring(0, 10);\r\n\r\n        await fs.writeFile('utils/reviews.json', JSON.stringify(allReviews), 'utf8');\r\n        return res.status(200).json({ message: 'Review modified successfully!' });\r\n\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return res.status(500).json({ message: 'An error occurred while attempting to edit the review.' });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = { addReview, viewReviewByFacility, viewUserReviews, editReview };"],"mappings":"AAAA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC,CAACE,QAAQ;AACjC,MAAM;EAAEC,QAAQ;EAAEC;AAAU,CAAC,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAErD,eAAeK,eAAeA,CAACC,GAAG,EAAEC,GAAG,EAAE;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAGF,GAAG,CAACG,MAAM,CAACD,QAAQ,CAAC,CAAC;;IAEtC;IACA,MAAME,KAAK,GAAG,MAAMP,QAAQ,CAAC,kBAAkB,CAAC;IAChD,MAAMQ,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,QAAQ,KAAKA,QAAQ,CAAC;IAEjE,IAAI,CAACG,UAAU,EAAE;MACb;MACA,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAkB,CAAC,CAAC;IAC/D;IAEA,MAAMC,UAAU,GAAG,MAAMd,QAAQ,CAAC,oBAAoB,CAAC;IACvD,MAAMe,aAAa,GAAGD,UAAU,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACZ,QAAQ,KAAKA,QAAQ,CAAC;;IAE/E;IACA,OAAOD,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACG,aAAa,CAAC;EAC9C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAOd,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAyD,CAAC,CAAC;EACtG;AACJ;AAGA,eAAeO,oBAAoBA,CAACjB,GAAG,EAAEC,GAAG,EAAE;EAC1C,IAAI;IACA,MAAMiB,UAAU,GAAGC,QAAQ,CAACnB,GAAG,CAACG,MAAM,CAACe,UAAU,CAAC,CAAC,CAAC;;IAEpD;IACA,MAAME,UAAU,GAAG,MAAMvB,QAAQ,CAAC,uBAAuB,CAAC;IAC1D,MAAMwB,cAAc,GAAGD,UAAU,CAACd,IAAI,CAACgB,QAAQ,IAAIA,QAAQ,CAACJ,UAAU,KAAKA,UAAU,CAAC;IAEtF,IAAI,CAACG,cAAc,EAAE;MACjB;MACA,OAAOpB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACnE;IAEA,MAAMC,UAAU,GAAG,MAAMd,QAAQ,CAAC,oBAAoB,CAAC;IACvD,MAAM0B,kBAAkB,GAAGZ,UAAU,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACI,UAAU,KAAKA,UAAU,CAAC;;IAExF;IACA,OAAOjB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACc,kBAAkB,CAAC;EACnD,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAOd,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAEK,KAAK,CAACL;IAAQ,CAAC,CAAC;EAC3D;AACJ;AAEA,eAAec,SAASA,CAACxB,GAAG,EAAEC,GAAG,EAAE;EAC/B,IAAI;IACA;IACA,MAAMiB,UAAU,GAAGC,QAAQ,CAACnB,GAAG,CAACyB,IAAI,CAACP,UAAU,CAAC;IAChD,MAAM;MAAEhB,QAAQ;MAAEY,MAAM,EAAEY;IAAW,CAAC,GAAG1B,GAAG,CAACyB,IAAI;;IAEjD;IACA,MAAMrB,KAAK,GAAG,MAAMP,QAAQ,CAAC,kBAAkB,CAAC;IAChD,MAAMQ,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,QAAQ,KAAKA,QAAQ,CAAC;IACjE,IAAI,CAACG,UAAU,EAAE;MACb,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA2C,CAAC,CAAC;IACxF;IAEA,IAAI,CAACQ,UAAU,IAAI,CAAChB,QAAQ,IAAI,CAACwB,UAAU,EAAE;MACzC,OAAOzB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC5E;;IAEA;IACA,MAAMU,UAAU,GAAG,MAAMvB,QAAQ,CAAC,uBAAuB,CAAC;IAC1D,MAAMwB,cAAc,GAAGD,UAAU,CAACd,IAAI,CAACgB,QAAQ,IAAIA,QAAQ,CAACJ,UAAU,KAAKA,UAAU,CAAC,CAAC,CAAC;IACxF,IAAI,CAACG,cAAc,EAAE;MACjB,OAAOpB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA+C,CAAC,CAAC;IAC5F;;IAEA;IACA,MAAMiB,OAAO,GAAG,MAAM9B,QAAQ,CAAC,oBAAoB,CAAC;;IAEpD;IACA,MAAM+B,cAAc,GAAGD,OAAO,CAACE,IAAI,CAACf,MAAM,IAAIA,MAAM,CAACZ,QAAQ,KAAKA,QAAQ,IAAIY,MAAM,CAACI,UAAU,KAAKA,UAAU,CAAC;IAC/G,IAAIU,cAAc,EAAE;MAChB,OAAO3B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAoD,CAAC,CAAC;IACjG;IAEA,MAAMoB,SAAS,GAAG,IAAIrC,OAAO,CAACyB,UAAU,EAAEhB,QAAQ,EAAEwB,UAAU,CAAC;IAC/D;IACAC,OAAO,CAACI,IAAI,CAACD,SAAS,CAAC;IACvB;IACA,MAAME,aAAa,GAAG,MAAMlC,SAAS,CAACgC,SAAS,EAAE,oBAAoB,CAAC;IACtE;;IAEA,OAAO7B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACuB,aAAa,CAAC;EAC9C,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAOd,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA6C,CAAC,CAAC;EAC1F;AACJ;AAEA,eAAeuB,UAAUA,CAACjC,GAAG,EAAEC,GAAG,EAAE;EAChC,IAAI;IACA,MAAMiB,UAAU,GAAGlB,GAAG,CAACyB,IAAI,CAACP,UAAU;IACtC,MAAMhB,QAAQ,GAAGF,GAAG,CAACyB,IAAI,CAACvB,QAAQ;IAClC,MAAMgC,UAAU,GAAGlC,GAAG,CAACyB,IAAI,CAACX,MAAM;;IAElC;IACA,IAAI,CAACoB,UAAU,CAACC,IAAI,CAAC,CAAC,EAAE;MACpB,OAAOlC,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC5E;IAEA,MAAMC,UAAU,GAAG,MAAMd,QAAQ,CAAC,oBAAoB,CAAC;IAEvD,MAAMuC,WAAW,GAAGzB,UAAU,CAAC0B,SAAS,CAACvB,MAAM,IAC3CA,MAAM,CAACI,UAAU,KAAKA,UAAU,IAAIJ,MAAM,CAACZ,QAAQ,KAAKA,QAC5D,CAAC;IAED,IAAIkC,WAAW,KAAK,CAAC,CAAC,EAAE;MACpB;MACA,OAAOnC,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAyB,CAAC,CAAC;IACtE;;IAEA;IACAC,UAAU,CAACyB,WAAW,CAAC,CAACtB,MAAM,GAAGoB,UAAU;IAC3CvB,UAAU,CAACyB,WAAW,CAAC,CAACE,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAE9E,MAAM9C,EAAE,CAAC+C,SAAS,CAAC,oBAAoB,EAAEC,IAAI,CAACC,SAAS,CAACjC,UAAU,CAAC,EAAE,MAAM,CAAC;IAC5E,OAAOV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAgC,CAAC,CAAC;EAE7E,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAOd,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAyD,CAAC,CAAC;EACtG;AACJ;AAGAmC,MAAM,CAACC,OAAO,GAAG;EAAEtB,SAAS;EAAEP,oBAAoB;EAAElB,eAAe;EAAEkC;AAAW,CAAC"}