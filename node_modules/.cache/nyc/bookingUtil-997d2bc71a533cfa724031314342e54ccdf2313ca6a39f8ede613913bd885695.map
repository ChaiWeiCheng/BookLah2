{"version":3,"names":["fs","require","promises","Booking","readJSON","writeJSON","isValidDateFormat","date","dateFormatRegex","test","isValidTimeFormat","time","trim","viewUserBookings","req","res","requestedUsername","params","name","allBookings","userBookings","filter","booking","length","status","json","message","error","addBooking","body","facility","bookingExists","some","newBooking","updatedBookings","updateBooking","id","modified","isBookingConflict","i","currentBooking","writeFile","JSON","stringify","module","exports"],"sourceRoot":"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\utils\\","sources":["bookingUtil.js"],"sourcesContent":["const fs = require('fs').promises;\r\nconst { Booking } = require('../models/Booking');\r\nconst { readJSON, writeJSON } = require('./userUtil')\r\n\r\n// Helper function to validate date format\r\nfunction isValidDateFormat(date) {\r\n\r\n    // Regular expression for \"Day/month/year\" format\r\n    const dateFormatRegex = /^\\d{1,2}\\/\\d{1,2}\\/\\d{2}$/;\r\n    //check if the provided date string matches the pattern defined by the regular expression dateFormatRegex.\r\n    return dateFormatRegex.test(date);\r\n}\r\n\r\n// Helper function to validate time format\r\nfunction isValidTimeFormat(time) {\r\n    // You can use a more sophisticated time validation logic if needed\r\n    // For simplicity, this example checks if the time has a valid format\r\n    return typeof time === 'string' && time.trim() !== '';\r\n}\r\n\r\nasync function viewUserBookings(req, res) {\r\n\r\n    const requestedUsername = req.params.name; // Getting name from the route parameter\r\n\r\n    try {\r\n        const allBookings = await readJSON('utils/bookings.json');\r\n\r\n        // Filter bookings based on the requested username\r\n        const userBookings = allBookings.filter(booking => booking.name === requestedUsername);\r\n\r\n        if (userBookings.length === 0) {\r\n            // If no bookings were found for the specified username\r\n            return res.status(404).json({ message: \"No bookings found for the specified user.\" });\r\n        }\r\n\r\n        return res.status(200).json(userBookings);\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\n\r\nasync function addBooking(req, res) {\r\n    try {\r\n        const allBookings = await readJSON('utils/bookings.json');\r\n\r\n        const name = req.body.name;\r\n        const facility = req.body.facility;\r\n        const date = req.body.date;\r\n        const time = req.body.time;\r\n\r\n        // Validate date format\r\n        if (!isValidDateFormat(date)) {\r\n            return res.status(400).json({ message: 'Invalid date format. Please provide a valid date.' });\r\n        }\r\n\r\n        // Validate time format\r\n        if (!isValidTimeFormat(time)) {\r\n            return res.status(400).json({ message: 'Invalid time format. Please provide a valid time range.' });\r\n        }\r\n\r\n\r\n        // Check if the proposed booking already exists in the JSON file\r\n        const bookingExists = allBookings.some(\r\n            (booking) =>\r\n                booking.facility === facility &&\r\n                booking.date === date &&\r\n                booking.time === time\r\n        );\r\n\r\n        if (bookingExists) {\r\n            return res.status(400).json({\r\n                message:\r\n                    'The chosen time for this facility is already booked by another person. Please choose another timing.',\r\n            });\r\n        }\r\n\r\n        const newBooking = new Booking(name, facility, date, time);\r\n\r\n        const updatedBookings = await writeJSON(newBooking, 'utils/bookings.json');\r\n\r\n        return res.status(201).json(updatedBookings);\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\n\r\nasync function updateBooking(req, res) {\r\n    try {\r\n        const id = req.params.id;\r\n        const facility = req.body.facility;\r\n        const date = req.body.date;\r\n        const time = req.body.time;\r\n\r\n         // Validate date format\r\n         if (!isValidDateFormat(date)) {\r\n            return res.status(400).json({ message: 'Invalid date format. Please provide a valid date.' });\r\n        }\r\n\r\n        // Validate time format\r\n        if (!isValidTimeFormat(time)) {\r\n            return res.status(400).json({ message: 'Invalid time format. Please provide a valid time range.' });\r\n        }\r\n        \r\n        const allBookings = await readJSON('utils/bookings.json');\r\n        var modified = false;\r\n\r\n        // Check if the proposed changes are already booked\r\n        const isBookingConflict = allBookings.some(\r\n            (booking) =>\r\n                booking.id !== id && // Exclude the current booking being updated\r\n                booking.facility === facility &&\r\n                booking.date === date &&\r\n                booking.time === time\r\n        );\r\n\r\n        if (isBookingConflict) {\r\n            return res.status(400).json({\r\n                message:\r\n                    'The chosen time for this facility is already booked by another person. Please choose another timing.',\r\n            });\r\n        }\r\n\r\n        for (var i = 0; i < allBookings.length; i++) {\r\n            var currentBooking = allBookings[i];\r\n            if (currentBooking.id == id) {\r\n                allBookings[i].facility = facility;\r\n                allBookings[i].date = date;\r\n                allBookings[i].time = time;\r\n                modified = true;\r\n            }\r\n        }\r\n\r\n        if (modified) {\r\n            await fs.writeFile('utils/bookings.json', JSON.stringify(allBookings), 'utf8');\r\n            return res.status(201).json({ message: 'Booking Updated Successfully!' });\r\n        } else {\r\n            return res.status(500).json({ message: 'Error occurred, unable to Update!' });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = { viewUserBookings, addBooking, updateBooking }\r\n"],"mappings":"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"}