function cov_iq43v9n75(){var path="C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\utils\\reviewsUtil.js";var hash="124979cfba130d2e741a394cbe5a99ae32c48eb6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\utils\\reviewsUtil.js",statementMap:{"0":{start:{line:3,column:4},end:{line:3,column:32}},"1":{start:{line:4,column:11},end:{line:4,column:33}},"2":{start:{line:8,column:4},end:{line:8,column:25}},"3":{start:{line:10,column:2},end:{line:32,column:3}},"4":{start:{line:11,column:21},end:{line:11,column:40}},"5":{start:{line:14,column:18},end:{line:14,column:52}},"6":{start:{line:15,column:23},end:{line:15,column:69}},"7":{start:{line:15,column:42},end:{line:15,column:68}},"8":{start:{line:16,column:4},end:{line:21,column:5}},"9":{start:{line:18,column:6},end:{line:20,column:9}},"10":{start:{line:22,column:23},end:{line:22,column:59}},"11":{start:{line:23,column:26},end:{line:23,column:83}},"12":{start:{line:23,column:54},end:{line:23,column:82}},"13":{start:{line:26,column:4},end:{line:26,column:47}},"14":{start:{line:28,column:4},end:{line:28,column:35}},"15":{start:{line:29,column:4},end:{line:31,column:7}},"16":{start:{line:35,column:2},end:{line:57,column:3}},"17":{start:{line:36,column:23},end:{line:36,column:54}},"18":{start:{line:39,column:23},end:{line:39,column:62}},"19":{start:{line:40,column:27},end:{line:40,column:90}},"20":{start:{line:40,column:55},end:{line:40,column:89}},"21":{start:{line:41,column:4},end:{line:46,column:5}},"22":{start:{line:43,column:6},end:{line:45,column:9}},"23":{start:{line:47,column:23},end:{line:47,column:59}},"24":{start:{line:48,column:31},end:{line:48,column:92}},"25":{start:{line:48,column:59},end:{line:48,column:91}},"26":{start:{line:51,column:4},end:{line:51,column:52}},"27":{start:{line:53,column:4},end:{line:53,column:35}},"28":{start:{line:54,column:4},end:{line:56,column:7}},"29":{start:{line:60,column:2},end:{line:114,column:3}},"30":{start:{line:62,column:23},end:{line:62,column:52}},"31":{start:{line:66,column:8},end:{line:66,column:16}},"32":{start:{line:69,column:18},end:{line:69,column:52}},"33":{start:{line:70,column:23},end:{line:70,column:69}},"34":{start:{line:70,column:42},end:{line:70,column:68}},"35":{start:{line:71,column:4},end:{line:75,column:5}},"36":{start:{line:72,column:6},end:{line:74,column:9}},"37":{start:{line:76,column:4},end:{line:80,column:5}},"38":{start:{line:77,column:6},end:{line:79,column:9}},"39":{start:{line:83,column:23},end:{line:83,column:62}},"40":{start:{line:84,column:27},end:{line:84,column:90}},"41":{start:{line:84,column:55},end:{line:84,column:89}},"42":{start:{line:85,column:4},end:{line:89,column:5}},"43":{start:{line:86,column:6},end:{line:88,column:9}},"44":{start:{line:92,column:20},end:{line:92,column:56}},"45":{start:{line:95,column:27},end:{line:95,column:115}},"46":{start:{line:95,column:50},end:{line:95,column:114}},"47":{start:{line:96,column:4},end:{line:100,column:5}},"48":{start:{line:97,column:6},end:{line:99,column:9}},"49":{start:{line:101,column:22},end:{line:101,column:67}},"50":{start:{line:103,column:4},end:{line:103,column:28}},"51":{start:{line:105,column:26},end:{line:105,column:74}},"52":{start:{line:108,column:4},end:{line:108,column:47}},"53":{start:{line:110,column:4},end:{line:110,column:35}},"54":{start:{line:111,column:4},end:{line:113,column:7}},"55":{start:{line:117,column:2},end:{line:149,column:3}},"56":{start:{line:118,column:23},end:{line:118,column:42}},"57":{start:{line:119,column:21},end:{line:119,column:38}},"58":{start:{line:120,column:23},end:{line:120,column:38}},"59":{start:{line:123,column:4},end:{line:127,column:5}},"60":{start:{line:124,column:6},end:{line:126,column:9}},"61":{start:{line:128,column:23},end:{line:128,column:59}},"62":{start:{line:129,column:24},end:{line:129,column:120}},"63":{start:{line:129,column:55},end:{line:129,column:119}},"64":{start:{line:130,column:4},end:{line:135,column:5}},"65":{start:{line:132,column:6},end:{line:134,column:9}},"66":{start:{line:138,column:4},end:{line:138,column:48}},"67":{start:{line:139,column:4},end:{line:139,column:83}},"68":{start:{line:140,column:4},end:{line:140,column:81}},"69":{start:{line:141,column:4},end:{line:143,column:7}},"70":{start:{line:145,column:4},end:{line:145,column:35}},"71":{start:{line:146,column:4},end:{line:148,column:7}},"72":{start:{line:151,column:0},end:{line:156,column:2}}},fnMap:{"0":{name:"viewUserReviews",decl:{start:{line:9,column:15},end:{line:9,column:30}},loc:{start:{line:9,column:41},end:{line:33,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:34},end:{line:15,column:35}},loc:{start:{line:15,column:42},end:{line:15,column:68}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:23,column:44},end:{line:23,column:45}},loc:{start:{line:23,column:54},end:{line:23,column:82}},line:23},"3":{name:"viewReviewByFacility",decl:{start:{line:34,column:15},end:{line:34,column:35}},loc:{start:{line:34,column:46},end:{line:58,column:1}},line:34},"4":{name:"(anonymous_4)",decl:{start:{line:40,column:43},end:{line:40,column:44}},loc:{start:{line:40,column:55},end:{line:40,column:89}},line:40},"5":{name:"(anonymous_5)",decl:{start:{line:48,column:49},end:{line:48,column:50}},loc:{start:{line:48,column:59},end:{line:48,column:91}},line:48},"6":{name:"addReview",decl:{start:{line:59,column:15},end:{line:59,column:24}},loc:{start:{line:59,column:35},end:{line:115,column:1}},line:59},"7":{name:"(anonymous_7)",decl:{start:{line:70,column:34},end:{line:70,column:35}},loc:{start:{line:70,column:42},end:{line:70,column:68}},line:70},"8":{name:"(anonymous_8)",decl:{start:{line:84,column:43},end:{line:84,column:44}},loc:{start:{line:84,column:55},end:{line:84,column:89}},line:84},"9":{name:"(anonymous_9)",decl:{start:{line:95,column:40},end:{line:95,column:41}},loc:{start:{line:95,column:50},end:{line:95,column:114}},line:95},"10":{name:"editReview",decl:{start:{line:116,column:15},end:{line:116,column:25}},loc:{start:{line:116,column:36},end:{line:150,column:1}},line:116},"11":{name:"(anonymous_11)",decl:{start:{line:129,column:45},end:{line:129,column:46}},loc:{start:{line:129,column:55},end:{line:129,column:119}},line:129}},branchMap:{"0":{loc:{start:{line:16,column:4},end:{line:21,column:5}},type:"if",locations:[{start:{line:16,column:4},end:{line:21,column:5}},{start:{line:16,column:4},end:{line:21,column:5}}],line:16},"1":{loc:{start:{line:41,column:4},end:{line:46,column:5}},type:"if",locations:[{start:{line:41,column:4},end:{line:46,column:5}},{start:{line:41,column:4},end:{line:46,column:5}}],line:41},"2":{loc:{start:{line:71,column:4},end:{line:75,column:5}},type:"if",locations:[{start:{line:71,column:4},end:{line:75,column:5}},{start:{line:71,column:4},end:{line:75,column:5}}],line:71},"3":{loc:{start:{line:76,column:4},end:{line:80,column:5}},type:"if",locations:[{start:{line:76,column:4},end:{line:80,column:5}},{start:{line:76,column:4},end:{line:80,column:5}}],line:76},"4":{loc:{start:{line:76,column:8},end:{line:76,column:47}},type:"binary-expr",locations:[{start:{line:76,column:8},end:{line:76,column:19}},{start:{line:76,column:23},end:{line:76,column:32}},{start:{line:76,column:36},end:{line:76,column:47}}],line:76},"5":{loc:{start:{line:85,column:4},end:{line:89,column:5}},type:"if",locations:[{start:{line:85,column:4},end:{line:89,column:5}},{start:{line:85,column:4},end:{line:89,column:5}}],line:85},"6":{loc:{start:{line:95,column:50},end:{line:95,column:114}},type:"binary-expr",locations:[{start:{line:95,column:50},end:{line:95,column:78}},{start:{line:95,column:82},end:{line:95,column:114}}],line:95},"7":{loc:{start:{line:96,column:4},end:{line:100,column:5}},type:"if",locations:[{start:{line:96,column:4},end:{line:100,column:5}},{start:{line:96,column:4},end:{line:100,column:5}}],line:96},"8":{loc:{start:{line:123,column:4},end:{line:127,column:5}},type:"if",locations:[{start:{line:123,column:4},end:{line:127,column:5}},{start:{line:123,column:4},end:{line:127,column:5}}],line:123},"9":{loc:{start:{line:129,column:55},end:{line:129,column:119}},type:"binary-expr",locations:[{start:{line:129,column:55},end:{line:129,column:87}},{start:{line:129,column:91},end:{line:129,column:119}}],line:129},"10":{loc:{start:{line:130,column:4},end:{line:135,column:5}},type:"if",locations:[{start:{line:130,column:4},end:{line:135,column:5}},{start:{line:130,column:4},end:{line:135,column:5}}],line:130}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},inputSourceMap:{version:3,names:["Reviews","require","fs","promises","readJSON","writeJSON","viewUserReviews","req","res","username","params","users","userExists","some","user","status","json","message","allReviews","reviewsByUser","filter","review","error","console","viewReviewByFacility","facilityId","parseInt","facilities","facilityExists","facility","reviewsForFacility","addReview","body","reviewBody","reviews","existingReview","find","newReview","push","updatedReview","editReview","reviewText","trim","reviewIndex","findIndex","datePosted","Date","toISOString","substring","writeFile","JSON","stringify","module","exports"],sourceRoot:"C:\\Users\\teiji\\TP Year 2-3 Coding Projects\\DevOps Y2\\BookLah\\utils\\",sources:["reviewsUtil.js"],sourcesContent:["const { Reviews } = require('../models/Reviews');\r\nconst fs = require('fs').promises;\r\nconst { readJSON, writeJSON } = require('./userUtil');\r\n\r\nasync function viewUserReviews(req, res) {\r\n    try {\r\n        const username = req.params.username; // Ensure the param name matches your route definition\r\n        \r\n        // Check if the user exists\r\n        const users = await readJSON('utils/users.json');\r\n        const userExists = users.some(user => user.username === username);\r\n\r\n        if (!userExists) {\r\n            // If the user doesn't exist, return a 404 Not Found\r\n            return res.status(404).json({ message: 'User not found.' });\r\n        }\r\n\r\n        const allReviews = await readJSON('utils/reviews.json');\r\n        const reviewsByUser = allReviews.filter(review => review.username === username);\r\n\r\n        // If there are no reviews for the user, return an empty array with a 200 OK status\r\n        return res.status(200).json(reviewsByUser);\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return res.status(500).json({ message: \"An error occurred while retrieving the user's reviews.\" });\r\n    }\r\n}\r\n\r\n\r\nasync function viewReviewByFacility(req, res) {\r\n    try {\r\n        const facilityId = parseInt(req.params.facilityId); // Convert to integer\r\n\r\n        // Check if the facility exists\r\n        const facilities = await readJSON('utils/facilities.json');\r\n        const facilityExists = facilities.some(facility => facility.facilityId === facilityId);\r\n\r\n        if (!facilityExists) {\r\n            // If the facility doesn't exist, return a 404 Not Found\r\n            return res.status(404).json({ message: 'Facility not found.' });\r\n        }\r\n\r\n        const allReviews = await readJSON('utils/reviews.json');\r\n        const reviewsForFacility = allReviews.filter(review => review.facilityId === facilityId);\r\n\r\n        // If there are no reviews for the facility, return an empty array with a 200 OK status\r\n        return res.status(200).json(reviewsForFacility);\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return res.status(500).json({ message: error.message });\r\n    }\r\n}\r\n\r\nasync function addReview(req, res) {\r\n    try {\r\n        // Retrieve review data from request body\r\n        const facilityId = parseInt(req.body.facilityId);\r\n        const { username, review: reviewBody } = req.body;\r\n\r\n        // Check for a valid user\r\n        const users = await readJSON('utils/users.json');\r\n        const userExists = users.some(user => user.username === username);\r\n        if (!userExists) {\r\n            return res.status(400).json({ message: \"Invalid user. Review could not be added.\" });\r\n        }\r\n\r\n        if (!facilityId || !username || !reviewBody) {\r\n            return res.status(400).json({ message: \"All fields must be provided.\" });\r\n        }\r\n\r\n        // Check for a valid facility\r\n        const facilities = await readJSON('utils/facilities.json');\r\n        const facilityExists = facilities.some(facility => facility.facilityId === facilityId); // Corrected property name\r\n        if (!facilityExists) {\r\n            return res.status(400).json({ message: \"Invalid facility. Review could not be added.\" });\r\n        }\r\n\r\n        // Read the existing reviews\r\n        const reviews = await readJSON('utils/reviews.json');\r\n\r\n        // Check if the user has already made a review for the facility\r\n        const existingReview = reviews.find(review => review.username === username && review.facilityId === facilityId);\r\n        if (existingReview) {\r\n            return res.status(400).json({ message: \"User has already made a review for this facility.\" });\r\n        }\r\n\r\n        const newReview = new Reviews(facilityId, username, reviewBody);\r\n        // Create a new review instance and add it to the array\r\n        reviews.push(newReview);\r\n        // Save the updated reviews back to the JSON file\r\n        const updatedReview = await writeJSON(newReview, 'utils/reviews.json');\r\n        // Return the new review as the response\r\n\r\n        return res.status(201).json(updatedReview);\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return res.status(500).json({ message: \"An error occurred while adding the review.\" });\r\n    }\r\n}\r\n\r\nasync function editReview(req, res) {\r\n    try {\r\n        const facilityId = req.body.facilityId;\r\n        const username = req.body.username;\r\n        const reviewText = req.body.review;\r\n\r\n        // Check if the review text is empty and return an error if so\r\n        if (!reviewText.trim()) {\r\n            return res.status(400).json({ message: 'Review text cannot be empty.' });\r\n        }\r\n\r\n        const allReviews = await readJSON('utils/reviews.json');\r\n\r\n        const reviewIndex = allReviews.findIndex(review => \r\n            review.facilityId === facilityId && review.username === username\r\n        );\r\n\r\n        if (reviewIndex === -1) {\r\n            // Check if a review by the user for the facility does not exist\r\n            return res.status(404).json({ message: 'Review does not exist.' });\r\n        }\r\n\r\n        // Update the review properties\r\n        allReviews[reviewIndex].review = reviewText;\r\n        allReviews[reviewIndex].datePosted = new Date().toISOString().substring(0, 10);\r\n\r\n        await fs.writeFile('utils/reviews.json', JSON.stringify(allReviews), 'utf8');\r\n        return res.status(200).json({ message: 'Review modified successfully!' });\r\n\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        return res.status(500).json({ message: 'An error occurred while attempting to edit the review.' });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = { addReview, viewReviewByFacility, viewUserReviews, editReview };"],mappings:"AAAA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC,CAACE,QAAQ;AACjC,MAAM;EAAEC,QAAQ;EAAEC;AAAU,CAAC,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAErD,eAAeK,eAAeA,CAACC,GAAG,EAAEC,GAAG,EAAE;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAGF,GAAG,CAACG,MAAM,CAACD,QAAQ,CAAC,CAAC;;IAEtC;IACA,MAAME,KAAK,GAAG,MAAMP,QAAQ,CAAC,kBAAkB,CAAC;IAChD,MAAMQ,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,QAAQ,KAAKA,QAAQ,CAAC;IAEjE,IAAI,CAACG,UAAU,EAAE;MACb;MACA,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAkB,CAAC,CAAC;IAC/D;IAEA,MAAMC,UAAU,GAAG,MAAMd,QAAQ,CAAC,oBAAoB,CAAC;IACvD,MAAMe,aAAa,GAAGD,UAAU,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACZ,QAAQ,KAAKA,QAAQ,CAAC;;IAE/E;IACA,OAAOD,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACG,aAAa,CAAC;EAC9C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAOd,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAyD,CAAC,CAAC;EACtG;AACJ;AAGA,eAAeO,oBAAoBA,CAACjB,GAAG,EAAEC,GAAG,EAAE;EAC1C,IAAI;IACA,MAAMiB,UAAU,GAAGC,QAAQ,CAACnB,GAAG,CAACG,MAAM,CAACe,UAAU,CAAC,CAAC,CAAC;;IAEpD;IACA,MAAME,UAAU,GAAG,MAAMvB,QAAQ,CAAC,uBAAuB,CAAC;IAC1D,MAAMwB,cAAc,GAAGD,UAAU,CAACd,IAAI,CAACgB,QAAQ,IAAIA,QAAQ,CAACJ,UAAU,KAAKA,UAAU,CAAC;IAEtF,IAAI,CAACG,cAAc,EAAE;MACjB;MACA,OAAOpB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACnE;IAEA,MAAMC,UAAU,GAAG,MAAMd,QAAQ,CAAC,oBAAoB,CAAC;IACvD,MAAM0B,kBAAkB,GAAGZ,UAAU,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACI,UAAU,KAAKA,UAAU,CAAC;;IAExF;IACA,OAAOjB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACc,kBAAkB,CAAC;EACnD,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAOd,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAEK,KAAK,CAACL;IAAQ,CAAC,CAAC;EAC3D;AACJ;AAEA,eAAec,SAASA,CAACxB,GAAG,EAAEC,GAAG,EAAE;EAC/B,IAAI;IACA;IACA,MAAMiB,UAAU,GAAGC,QAAQ,CAACnB,GAAG,CAACyB,IAAI,CAACP,UAAU,CAAC;IAChD,MAAM;MAAEhB,QAAQ;MAAEY,MAAM,EAAEY;IAAW,CAAC,GAAG1B,GAAG,CAACyB,IAAI;;IAEjD;IACA,MAAMrB,KAAK,GAAG,MAAMP,QAAQ,CAAC,kBAAkB,CAAC;IAChD,MAAMQ,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,QAAQ,KAAKA,QAAQ,CAAC;IACjE,IAAI,CAACG,UAAU,EAAE;MACb,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA2C,CAAC,CAAC;IACxF;IAEA,IAAI,CAACQ,UAAU,IAAI,CAAChB,QAAQ,IAAI,CAACwB,UAAU,EAAE;MACzC,OAAOzB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC5E;;IAEA;IACA,MAAMU,UAAU,GAAG,MAAMvB,QAAQ,CAAC,uBAAuB,CAAC;IAC1D,MAAMwB,cAAc,GAAGD,UAAU,CAACd,IAAI,CAACgB,QAAQ,IAAIA,QAAQ,CAACJ,UAAU,KAAKA,UAAU,CAAC,CAAC,CAAC;IACxF,IAAI,CAACG,cAAc,EAAE;MACjB,OAAOpB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA+C,CAAC,CAAC;IAC5F;;IAEA;IACA,MAAMiB,OAAO,GAAG,MAAM9B,QAAQ,CAAC,oBAAoB,CAAC;;IAEpD;IACA,MAAM+B,cAAc,GAAGD,OAAO,CAACE,IAAI,CAACf,MAAM,IAAIA,MAAM,CAACZ,QAAQ,KAAKA,QAAQ,IAAIY,MAAM,CAACI,UAAU,KAAKA,UAAU,CAAC;IAC/G,IAAIU,cAAc,EAAE;MAChB,OAAO3B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAoD,CAAC,CAAC;IACjG;IAEA,MAAMoB,SAAS,GAAG,IAAIrC,OAAO,CAACyB,UAAU,EAAEhB,QAAQ,EAAEwB,UAAU,CAAC;IAC/D;IACAC,OAAO,CAACI,IAAI,CAACD,SAAS,CAAC;IACvB;IACA,MAAME,aAAa,GAAG,MAAMlC,SAAS,CAACgC,SAAS,EAAE,oBAAoB,CAAC;IACtE;;IAEA,OAAO7B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACuB,aAAa,CAAC;EAC9C,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAOd,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA6C,CAAC,CAAC;EAC1F;AACJ;AAEA,eAAeuB,UAAUA,CAACjC,GAAG,EAAEC,GAAG,EAAE;EAChC,IAAI;IACA,MAAMiB,UAAU,GAAGlB,GAAG,CAACyB,IAAI,CAACP,UAAU;IACtC,MAAMhB,QAAQ,GAAGF,GAAG,CAACyB,IAAI,CAACvB,QAAQ;IAClC,MAAMgC,UAAU,GAAGlC,GAAG,CAACyB,IAAI,CAACX,MAAM;;IAElC;IACA,IAAI,CAACoB,UAAU,CAACC,IAAI,CAAC,CAAC,EAAE;MACpB,OAAOlC,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC5E;IAEA,MAAMC,UAAU,GAAG,MAAMd,QAAQ,CAAC,oBAAoB,CAAC;IAEvD,MAAMuC,WAAW,GAAGzB,UAAU,CAAC0B,SAAS,CAACvB,MAAM,IAC3CA,MAAM,CAACI,UAAU,KAAKA,UAAU,IAAIJ,MAAM,CAACZ,QAAQ,KAAKA,QAC5D,CAAC;IAED,IAAIkC,WAAW,KAAK,CAAC,CAAC,EAAE;MACpB;MACA,OAAOnC,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAyB,CAAC,CAAC;IACtE;;IAEA;IACAC,UAAU,CAACyB,WAAW,CAAC,CAACtB,MAAM,GAAGoB,UAAU;IAC3CvB,UAAU,CAACyB,WAAW,CAAC,CAACE,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAE9E,MAAM9C,EAAE,CAAC+C,SAAS,CAAC,oBAAoB,EAAEC,IAAI,CAACC,SAAS,CAACjC,UAAU,CAAC,EAAE,MAAM,CAAC;IAC5E,OAAOV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAgC,CAAC,CAAC;EAE7E,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAOd,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAyD,CAAC,CAAC;EACtG;AACJ;AAGAmC,MAAM,CAACC,OAAO,GAAG;EAAEtB,SAAS;EAAEP,oBAAoB;EAAElB,eAAe;EAAEkC;AAAW,CAAC"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"124979cfba130d2e741a394cbe5a99ae32c48eb6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_iq43v9n75=function(){return actualCoverage;};}return actualCoverage;}cov_iq43v9n75();const{Reviews}=(cov_iq43v9n75().s[0]++,require('../models/Reviews'));const fs=(cov_iq43v9n75().s[1]++,require('fs').promises);const{readJSON,writeJSON}=(cov_iq43v9n75().s[2]++,require('./userUtil'));async function viewUserReviews(req,res){cov_iq43v9n75().f[0]++;cov_iq43v9n75().s[3]++;try{const username=(cov_iq43v9n75().s[4]++,req.params.username);// Ensure the param name matches your route definition
// Check if the user exists
const users=(cov_iq43v9n75().s[5]++,await readJSON('utils/users.json'));const userExists=(cov_iq43v9n75().s[6]++,users.some(user=>{cov_iq43v9n75().f[1]++;cov_iq43v9n75().s[7]++;return user.username===username;}));cov_iq43v9n75().s[8]++;if(!userExists){cov_iq43v9n75().b[0][0]++;cov_iq43v9n75().s[9]++;// If the user doesn't exist, return a 404 Not Found
return res.status(404).json({message:'User not found.'});}else{cov_iq43v9n75().b[0][1]++;}const allReviews=(cov_iq43v9n75().s[10]++,await readJSON('utils/reviews.json'));const reviewsByUser=(cov_iq43v9n75().s[11]++,allReviews.filter(review=>{cov_iq43v9n75().f[2]++;cov_iq43v9n75().s[12]++;return review.username===username;}));// If there are no reviews for the user, return an empty array with a 200 OK status
cov_iq43v9n75().s[13]++;return res.status(200).json(reviewsByUser);}catch(error){cov_iq43v9n75().s[14]++;console.error('Error:',error);cov_iq43v9n75().s[15]++;return res.status(500).json({message:"An error occurred while retrieving the user's reviews."});}}async function viewReviewByFacility(req,res){cov_iq43v9n75().f[3]++;cov_iq43v9n75().s[16]++;try{const facilityId=(cov_iq43v9n75().s[17]++,parseInt(req.params.facilityId));// Convert to integer
// Check if the facility exists
const facilities=(cov_iq43v9n75().s[18]++,await readJSON('utils/facilities.json'));const facilityExists=(cov_iq43v9n75().s[19]++,facilities.some(facility=>{cov_iq43v9n75().f[4]++;cov_iq43v9n75().s[20]++;return facility.facilityId===facilityId;}));cov_iq43v9n75().s[21]++;if(!facilityExists){cov_iq43v9n75().b[1][0]++;cov_iq43v9n75().s[22]++;// If the facility doesn't exist, return a 404 Not Found
return res.status(404).json({message:'Facility not found.'});}else{cov_iq43v9n75().b[1][1]++;}const allReviews=(cov_iq43v9n75().s[23]++,await readJSON('utils/reviews.json'));const reviewsForFacility=(cov_iq43v9n75().s[24]++,allReviews.filter(review=>{cov_iq43v9n75().f[5]++;cov_iq43v9n75().s[25]++;return review.facilityId===facilityId;}));// If there are no reviews for the facility, return an empty array with a 200 OK status
cov_iq43v9n75().s[26]++;return res.status(200).json(reviewsForFacility);}catch(error){cov_iq43v9n75().s[27]++;console.error('Error:',error);cov_iq43v9n75().s[28]++;return res.status(500).json({message:error.message});}}async function addReview(req,res){cov_iq43v9n75().f[6]++;cov_iq43v9n75().s[29]++;try{// Retrieve review data from request body
const facilityId=(cov_iq43v9n75().s[30]++,parseInt(req.body.facilityId));const{username,review:reviewBody}=(cov_iq43v9n75().s[31]++,req.body);// Check for a valid user
const users=(cov_iq43v9n75().s[32]++,await readJSON('utils/users.json'));const userExists=(cov_iq43v9n75().s[33]++,users.some(user=>{cov_iq43v9n75().f[7]++;cov_iq43v9n75().s[34]++;return user.username===username;}));cov_iq43v9n75().s[35]++;if(!userExists){cov_iq43v9n75().b[2][0]++;cov_iq43v9n75().s[36]++;return res.status(400).json({message:"Invalid user. Review could not be added."});}else{cov_iq43v9n75().b[2][1]++;}cov_iq43v9n75().s[37]++;if((cov_iq43v9n75().b[4][0]++,!facilityId)||(cov_iq43v9n75().b[4][1]++,!username)||(cov_iq43v9n75().b[4][2]++,!reviewBody)){cov_iq43v9n75().b[3][0]++;cov_iq43v9n75().s[38]++;return res.status(400).json({message:"All fields must be provided."});}else{cov_iq43v9n75().b[3][1]++;}// Check for a valid facility
const facilities=(cov_iq43v9n75().s[39]++,await readJSON('utils/facilities.json'));const facilityExists=(cov_iq43v9n75().s[40]++,facilities.some(facility=>{cov_iq43v9n75().f[8]++;cov_iq43v9n75().s[41]++;return facility.facilityId===facilityId;}));// Corrected property name
cov_iq43v9n75().s[42]++;if(!facilityExists){cov_iq43v9n75().b[5][0]++;cov_iq43v9n75().s[43]++;return res.status(400).json({message:"Invalid facility. Review could not be added."});}else{cov_iq43v9n75().b[5][1]++;}// Read the existing reviews
const reviews=(cov_iq43v9n75().s[44]++,await readJSON('utils/reviews.json'));// Check if the user has already made a review for the facility
const existingReview=(cov_iq43v9n75().s[45]++,reviews.find(review=>{cov_iq43v9n75().f[9]++;cov_iq43v9n75().s[46]++;return(cov_iq43v9n75().b[6][0]++,review.username===username)&&(cov_iq43v9n75().b[6][1]++,review.facilityId===facilityId);}));cov_iq43v9n75().s[47]++;if(existingReview){cov_iq43v9n75().b[7][0]++;cov_iq43v9n75().s[48]++;return res.status(400).json({message:"User has already made a review for this facility."});}else{cov_iq43v9n75().b[7][1]++;}const newReview=(cov_iq43v9n75().s[49]++,new Reviews(facilityId,username,reviewBody));// Create a new review instance and add it to the array
cov_iq43v9n75().s[50]++;reviews.push(newReview);// Save the updated reviews back to the JSON file
const updatedReview=(cov_iq43v9n75().s[51]++,await writeJSON(newReview,'utils/reviews.json'));// Return the new review as the response
cov_iq43v9n75().s[52]++;return res.status(201).json(updatedReview);}catch(error){cov_iq43v9n75().s[53]++;console.error('Error:',error);cov_iq43v9n75().s[54]++;return res.status(500).json({message:"An error occurred while adding the review."});}}async function editReview(req,res){cov_iq43v9n75().f[10]++;cov_iq43v9n75().s[55]++;try{const facilityId=(cov_iq43v9n75().s[56]++,req.body.facilityId);const username=(cov_iq43v9n75().s[57]++,req.body.username);const reviewText=(cov_iq43v9n75().s[58]++,req.body.review);// Check if the review text is empty and return an error if so
cov_iq43v9n75().s[59]++;if(!reviewText.trim()){cov_iq43v9n75().b[8][0]++;cov_iq43v9n75().s[60]++;return res.status(400).json({message:'Review text cannot be empty.'});}else{cov_iq43v9n75().b[8][1]++;}const allReviews=(cov_iq43v9n75().s[61]++,await readJSON('utils/reviews.json'));const reviewIndex=(cov_iq43v9n75().s[62]++,allReviews.findIndex(review=>{cov_iq43v9n75().f[11]++;cov_iq43v9n75().s[63]++;return(cov_iq43v9n75().b[9][0]++,review.facilityId===facilityId)&&(cov_iq43v9n75().b[9][1]++,review.username===username);}));cov_iq43v9n75().s[64]++;if(reviewIndex===-1){cov_iq43v9n75().b[10][0]++;cov_iq43v9n75().s[65]++;// Check if a review by the user for the facility does not exist
return res.status(404).json({message:'Review does not exist.'});}else{cov_iq43v9n75().b[10][1]++;}// Update the review properties
cov_iq43v9n75().s[66]++;allReviews[reviewIndex].review=reviewText;cov_iq43v9n75().s[67]++;allReviews[reviewIndex].datePosted=new Date().toISOString().substring(0,10);cov_iq43v9n75().s[68]++;await fs.writeFile('utils/reviews.json',JSON.stringify(allReviews),'utf8');cov_iq43v9n75().s[69]++;return res.status(200).json({message:'Review modified successfully!'});}catch(error){cov_iq43v9n75().s[70]++;console.error('Error:',error);cov_iq43v9n75().s[71]++;return res.status(500).json({message:'An error occurred while attempting to edit the review.'});}}cov_iq43v9n75().s[72]++;module.exports={addReview,viewReviewByFacility,viewUserReviews,editReview};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZXZpZXdzIiwicmVxdWlyZSIsImZzIiwicHJvbWlzZXMiLCJyZWFkSlNPTiIsIndyaXRlSlNPTiIsInZpZXdVc2VyUmV2aWV3cyIsInJlcSIsInJlcyIsInVzZXJuYW1lIiwicGFyYW1zIiwidXNlcnMiLCJ1c2VyRXhpc3RzIiwic29tZSIsInVzZXIiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImFsbFJldmlld3MiLCJyZXZpZXdzQnlVc2VyIiwiZmlsdGVyIiwicmV2aWV3IiwiZXJyb3IiLCJjb25zb2xlIiwidmlld1Jldmlld0J5RmFjaWxpdHkiLCJmYWNpbGl0eUlkIiwicGFyc2VJbnQiLCJmYWNpbGl0aWVzIiwiZmFjaWxpdHlFeGlzdHMiLCJmYWNpbGl0eSIsInJldmlld3NGb3JGYWNpbGl0eSIsImFkZFJldmlldyIsImJvZHkiLCJyZXZpZXdCb2R5IiwicmV2aWV3cyIsImV4aXN0aW5nUmV2aWV3IiwiZmluZCIsIm5ld1JldmlldyIsInB1c2giLCJ1cGRhdGVkUmV2aWV3IiwiZWRpdFJldmlldyIsInJldmlld1RleHQiLCJ0cmltIiwicmV2aWV3SW5kZXgiLCJmaW5kSW5kZXgiLCJkYXRlUG9zdGVkIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3Vic3RyaW5nIiwid3JpdGVGaWxlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xcdGVpamlcXFRQIFllYXIgMi0zIENvZGluZyBQcm9qZWN0c1xcRGV2T3BzIFkyXFxCb29rTGFoXFx1dGlsc1xcIiwic291cmNlcyI6WyJyZXZpZXdzVXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IFJldmlld3MgfSA9IHJlcXVpcmUoJy4uL21vZGVscy9SZXZpZXdzJyk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKS5wcm9taXNlcztcclxuY29uc3QgeyByZWFkSlNPTiwgd3JpdGVKU09OIH0gPSByZXF1aXJlKCcuL3VzZXJVdGlsJyk7XHJcblxyXG5hc3luYyBmdW5jdGlvbiB2aWV3VXNlclJldmlld3MocmVxLCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSByZXEucGFyYW1zLnVzZXJuYW1lOyAvLyBFbnN1cmUgdGhlIHBhcmFtIG5hbWUgbWF0Y2hlcyB5b3VyIHJvdXRlIGRlZmluaXRpb25cclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdXNlciBleGlzdHNcclxuICAgICAgICBjb25zdCB1c2VycyA9IGF3YWl0IHJlYWRKU09OKCd1dGlscy91c2Vycy5qc29uJyk7XHJcbiAgICAgICAgY29uc3QgdXNlckV4aXN0cyA9IHVzZXJzLnNvbWUodXNlciA9PiB1c2VyLnVzZXJuYW1lID09PSB1c2VybmFtZSk7XHJcblxyXG4gICAgICAgIGlmICghdXNlckV4aXN0cykge1xyXG4gICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBkb2Vzbid0IGV4aXN0LCByZXR1cm4gYSA0MDQgTm90IEZvdW5kXHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZC4nIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYWxsUmV2aWV3cyA9IGF3YWl0IHJlYWRKU09OKCd1dGlscy9yZXZpZXdzLmpzb24nKTtcclxuICAgICAgICBjb25zdCByZXZpZXdzQnlVc2VyID0gYWxsUmV2aWV3cy5maWx0ZXIocmV2aWV3ID0+IHJldmlldy51c2VybmFtZSA9PT0gdXNlcm5hbWUpO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gcmV2aWV3cyBmb3IgdGhlIHVzZXIsIHJldHVybiBhbiBlbXB0eSBhcnJheSB3aXRoIGEgMjAwIE9LIHN0YXR1c1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihyZXZpZXdzQnlVc2VyKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcmV0cmlldmluZyB0aGUgdXNlcidzIHJldmlld3MuXCIgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiB2aWV3UmV2aWV3QnlGYWNpbGl0eShyZXEsIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBmYWNpbGl0eUlkID0gcGFyc2VJbnQocmVxLnBhcmFtcy5mYWNpbGl0eUlkKTsgLy8gQ29udmVydCB0byBpbnRlZ2VyXHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBmYWNpbGl0eSBleGlzdHNcclxuICAgICAgICBjb25zdCBmYWNpbGl0aWVzID0gYXdhaXQgcmVhZEpTT04oJ3V0aWxzL2ZhY2lsaXRpZXMuanNvbicpO1xyXG4gICAgICAgIGNvbnN0IGZhY2lsaXR5RXhpc3RzID0gZmFjaWxpdGllcy5zb21lKGZhY2lsaXR5ID0+IGZhY2lsaXR5LmZhY2lsaXR5SWQgPT09IGZhY2lsaXR5SWQpO1xyXG5cclxuICAgICAgICBpZiAoIWZhY2lsaXR5RXhpc3RzKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBmYWNpbGl0eSBkb2Vzbid0IGV4aXN0LCByZXR1cm4gYSA0MDQgTm90IEZvdW5kXHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdGYWNpbGl0eSBub3QgZm91bmQuJyB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbFJldmlld3MgPSBhd2FpdCByZWFkSlNPTigndXRpbHMvcmV2aWV3cy5qc29uJyk7XHJcbiAgICAgICAgY29uc3QgcmV2aWV3c0ZvckZhY2lsaXR5ID0gYWxsUmV2aWV3cy5maWx0ZXIocmV2aWV3ID0+IHJldmlldy5mYWNpbGl0eUlkID09PSBmYWNpbGl0eUlkKTtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHJldmlld3MgZm9yIHRoZSBmYWNpbGl0eSwgcmV0dXJuIGFuIGVtcHR5IGFycmF5IHdpdGggYSAyMDAgT0sgc3RhdHVzXHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJldmlld3NGb3JGYWNpbGl0eSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBhZGRSZXZpZXcocmVxLCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gUmV0cmlldmUgcmV2aWV3IGRhdGEgZnJvbSByZXF1ZXN0IGJvZHlcclxuICAgICAgICBjb25zdCBmYWNpbGl0eUlkID0gcGFyc2VJbnQocmVxLmJvZHkuZmFjaWxpdHlJZCk7XHJcbiAgICAgICAgY29uc3QgeyB1c2VybmFtZSwgcmV2aWV3OiByZXZpZXdCb2R5IH0gPSByZXEuYm9keTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGEgdmFsaWQgdXNlclxyXG4gICAgICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgcmVhZEpTT04oJ3V0aWxzL3VzZXJzLmpzb24nKTtcclxuICAgICAgICBjb25zdCB1c2VyRXhpc3RzID0gdXNlcnMuc29tZSh1c2VyID0+IHVzZXIudXNlcm5hbWUgPT09IHVzZXJuYW1lKTtcclxuICAgICAgICBpZiAoIXVzZXJFeGlzdHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogXCJJbnZhbGlkIHVzZXIuIFJldmlldyBjb3VsZCBub3QgYmUgYWRkZWQuXCIgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWZhY2lsaXR5SWQgfHwgIXVzZXJuYW1lIHx8ICFyZXZpZXdCb2R5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6IFwiQWxsIGZpZWxkcyBtdXN0IGJlIHByb3ZpZGVkLlwiIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGEgdmFsaWQgZmFjaWxpdHlcclxuICAgICAgICBjb25zdCBmYWNpbGl0aWVzID0gYXdhaXQgcmVhZEpTT04oJ3V0aWxzL2ZhY2lsaXRpZXMuanNvbicpO1xyXG4gICAgICAgIGNvbnN0IGZhY2lsaXR5RXhpc3RzID0gZmFjaWxpdGllcy5zb21lKGZhY2lsaXR5ID0+IGZhY2lsaXR5LmZhY2lsaXR5SWQgPT09IGZhY2lsaXR5SWQpOyAvLyBDb3JyZWN0ZWQgcHJvcGVydHkgbmFtZVxyXG4gICAgICAgIGlmICghZmFjaWxpdHlFeGlzdHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogXCJJbnZhbGlkIGZhY2lsaXR5LiBSZXZpZXcgY291bGQgbm90IGJlIGFkZGVkLlwiIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVhZCB0aGUgZXhpc3RpbmcgcmV2aWV3c1xyXG4gICAgICAgIGNvbnN0IHJldmlld3MgPSBhd2FpdCByZWFkSlNPTigndXRpbHMvcmV2aWV3cy5qc29uJyk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSB1c2VyIGhhcyBhbHJlYWR5IG1hZGUgYSByZXZpZXcgZm9yIHRoZSBmYWNpbGl0eVxyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nUmV2aWV3ID0gcmV2aWV3cy5maW5kKHJldmlldyA9PiByZXZpZXcudXNlcm5hbWUgPT09IHVzZXJuYW1lICYmIHJldmlldy5mYWNpbGl0eUlkID09PSBmYWNpbGl0eUlkKTtcclxuICAgICAgICBpZiAoZXhpc3RpbmdSZXZpZXcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogXCJVc2VyIGhhcyBhbHJlYWR5IG1hZGUgYSByZXZpZXcgZm9yIHRoaXMgZmFjaWxpdHkuXCIgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuZXdSZXZpZXcgPSBuZXcgUmV2aWV3cyhmYWNpbGl0eUlkLCB1c2VybmFtZSwgcmV2aWV3Qm9keSk7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHJldmlldyBpbnN0YW5jZSBhbmQgYWRkIGl0IHRvIHRoZSBhcnJheVxyXG4gICAgICAgIHJldmlld3MucHVzaChuZXdSZXZpZXcpO1xyXG4gICAgICAgIC8vIFNhdmUgdGhlIHVwZGF0ZWQgcmV2aWV3cyBiYWNrIHRvIHRoZSBKU09OIGZpbGVcclxuICAgICAgICBjb25zdCB1cGRhdGVkUmV2aWV3ID0gYXdhaXQgd3JpdGVKU09OKG5ld1JldmlldywgJ3V0aWxzL3Jldmlld3MuanNvbicpO1xyXG4gICAgICAgIC8vIFJldHVybiB0aGUgbmV3IHJldmlldyBhcyB0aGUgcmVzcG9uc2VcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAxKS5qc29uKHVwZGF0ZWRSZXZpZXcpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhZGRpbmcgdGhlIHJldmlldy5cIiB9KTtcclxuICAgIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZWRpdFJldmlldyhyZXEsIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBmYWNpbGl0eUlkID0gcmVxLmJvZHkuZmFjaWxpdHlJZDtcclxuICAgICAgICBjb25zdCB1c2VybmFtZSA9IHJlcS5ib2R5LnVzZXJuYW1lO1xyXG4gICAgICAgIGNvbnN0IHJldmlld1RleHQgPSByZXEuYm9keS5yZXZpZXc7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSByZXZpZXcgdGV4dCBpcyBlbXB0eSBhbmQgcmV0dXJuIGFuIGVycm9yIGlmIHNvXHJcbiAgICAgICAgaWYgKCFyZXZpZXdUZXh0LnRyaW0oKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnUmV2aWV3IHRleHQgY2Fubm90IGJlIGVtcHR5LicgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBhbGxSZXZpZXdzID0gYXdhaXQgcmVhZEpTT04oJ3V0aWxzL3Jldmlld3MuanNvbicpO1xyXG5cclxuICAgICAgICBjb25zdCByZXZpZXdJbmRleCA9IGFsbFJldmlld3MuZmluZEluZGV4KHJldmlldyA9PiBcclxuICAgICAgICAgICAgcmV2aWV3LmZhY2lsaXR5SWQgPT09IGZhY2lsaXR5SWQgJiYgcmV2aWV3LnVzZXJuYW1lID09PSB1c2VybmFtZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmIChyZXZpZXdJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgYSByZXZpZXcgYnkgdGhlIHVzZXIgZm9yIHRoZSBmYWNpbGl0eSBkb2VzIG5vdCBleGlzdFxyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnUmV2aWV3IGRvZXMgbm90IGV4aXN0LicgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHJldmlldyBwcm9wZXJ0aWVzXHJcbiAgICAgICAgYWxsUmV2aWV3c1tyZXZpZXdJbmRleF0ucmV2aWV3ID0gcmV2aWV3VGV4dDtcclxuICAgICAgICBhbGxSZXZpZXdzW3Jldmlld0luZGV4XS5kYXRlUG9zdGVkID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcblxyXG4gICAgICAgIGF3YWl0IGZzLndyaXRlRmlsZSgndXRpbHMvcmV2aWV3cy5qc29uJywgSlNPTi5zdHJpbmdpZnkoYWxsUmV2aWV3cyksICd1dGY4Jyk7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogJ1JldmlldyBtb2RpZmllZCBzdWNjZXNzZnVsbHkhJyB9KTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBlZGl0IHRoZSByZXZpZXcuJyB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0geyBhZGRSZXZpZXcsIHZpZXdSZXZpZXdCeUZhY2lsaXR5LCB2aWV3VXNlclJldmlld3MsIGVkaXRSZXZpZXcgfTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07RUFBRUE7QUFBUSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUNoRCxNQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQ0UsUUFBUTtBQUNqQyxNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFFckQsZUFBZUssZUFBZUEsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUU7RUFDckMsSUFBSTtJQUNBLE1BQU1DLFFBQVEsR0FBR0YsR0FBRyxDQUFDRyxNQUFNLENBQUNELFFBQVEsQ0FBQyxDQUFDOztJQUV0QztJQUNBLE1BQU1FLEtBQUssR0FBRyxNQUFNUCxRQUFRLENBQUMsa0JBQWtCLENBQUM7SUFDaEQsTUFBTVEsVUFBVSxHQUFHRCxLQUFLLENBQUNFLElBQUksQ0FBQ0MsSUFBSSxJQUFJQSxJQUFJLENBQUNMLFFBQVEsS0FBS0EsUUFBUSxDQUFDO0lBRWpFLElBQUksQ0FBQ0csVUFBVSxFQUFFO01BQ2I7TUFDQSxPQUFPSixHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO1FBQUVDLE9BQU8sRUFBRTtNQUFrQixDQUFDLENBQUM7SUFDL0Q7SUFFQSxNQUFNQyxVQUFVLEdBQUcsTUFBTWQsUUFBUSxDQUFDLG9CQUFvQixDQUFDO0lBQ3ZELE1BQU1lLGFBQWEsR0FBR0QsVUFBVSxDQUFDRSxNQUFNLENBQUNDLE1BQU0sSUFBSUEsTUFBTSxDQUFDWixRQUFRLEtBQUtBLFFBQVEsQ0FBQzs7SUFFL0U7SUFDQSxPQUFPRCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDRyxhQUFhLENBQUM7RUFDOUMsQ0FBQyxDQUFDLE9BQU9HLEtBQUssRUFBRTtJQUNaQyxPQUFPLENBQUNELEtBQUssQ0FBQyxRQUFRLEVBQUVBLEtBQUssQ0FBQztJQUM5QixPQUFPZCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQUVDLE9BQU8sRUFBRTtJQUF5RCxDQUFDLENBQUM7RUFDdEc7QUFDSjtBQUdBLGVBQWVPLG9CQUFvQkEsQ0FBQ2pCLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQzFDLElBQUk7SUFDQSxNQUFNaUIsVUFBVSxHQUFHQyxRQUFRLENBQUNuQixHQUFHLENBQUNHLE1BQU0sQ0FBQ2UsVUFBVSxDQUFDLENBQUMsQ0FBQzs7SUFFcEQ7SUFDQSxNQUFNRSxVQUFVLEdBQUcsTUFBTXZCLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztJQUMxRCxNQUFNd0IsY0FBYyxHQUFHRCxVQUFVLENBQUNkLElBQUksQ0FBQ2dCLFFBQVEsSUFBSUEsUUFBUSxDQUFDSixVQUFVLEtBQUtBLFVBQVUsQ0FBQztJQUV0RixJQUFJLENBQUNHLGNBQWMsRUFBRTtNQUNqQjtNQUNBLE9BQU9wQixHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO1FBQUVDLE9BQU8sRUFBRTtNQUFzQixDQUFDLENBQUM7SUFDbkU7SUFFQSxNQUFNQyxVQUFVLEdBQUcsTUFBTWQsUUFBUSxDQUFDLG9CQUFvQixDQUFDO0lBQ3ZELE1BQU0wQixrQkFBa0IsR0FBR1osVUFBVSxDQUFDRSxNQUFNLENBQUNDLE1BQU0sSUFBSUEsTUFBTSxDQUFDSSxVQUFVLEtBQUtBLFVBQVUsQ0FBQzs7SUFFeEY7SUFDQSxPQUFPakIsR0FBRyxDQUFDTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQ2Msa0JBQWtCLENBQUM7RUFDbkQsQ0FBQyxDQUFDLE9BQU9SLEtBQUssRUFBRTtJQUNaQyxPQUFPLENBQUNELEtBQUssQ0FBQyxRQUFRLEVBQUVBLEtBQUssQ0FBQztJQUM5QixPQUFPZCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQUVDLE9BQU8sRUFBRUssS0FBSyxDQUFDTDtJQUFRLENBQUMsQ0FBQztFQUMzRDtBQUNKO0FBRUEsZUFBZWMsU0FBU0EsQ0FBQ3hCLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQy9CLElBQUk7SUFDQTtJQUNBLE1BQU1pQixVQUFVLEdBQUdDLFFBQVEsQ0FBQ25CLEdBQUcsQ0FBQ3lCLElBQUksQ0FBQ1AsVUFBVSxDQUFDO0lBQ2hELE1BQU07TUFBRWhCLFFBQVE7TUFBRVksTUFBTSxFQUFFWTtJQUFXLENBQUMsR0FBRzFCLEdBQUcsQ0FBQ3lCLElBQUk7O0lBRWpEO0lBQ0EsTUFBTXJCLEtBQUssR0FBRyxNQUFNUCxRQUFRLENBQUMsa0JBQWtCLENBQUM7SUFDaEQsTUFBTVEsVUFBVSxHQUFHRCxLQUFLLENBQUNFLElBQUksQ0FBQ0MsSUFBSSxJQUFJQSxJQUFJLENBQUNMLFFBQVEsS0FBS0EsUUFBUSxDQUFDO0lBQ2pFLElBQUksQ0FBQ0csVUFBVSxFQUFFO01BQ2IsT0FBT0osR0FBRyxDQUFDTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztRQUFFQyxPQUFPLEVBQUU7TUFBMkMsQ0FBQyxDQUFDO0lBQ3hGO0lBRUEsSUFBSSxDQUFDUSxVQUFVLElBQUksQ0FBQ2hCLFFBQVEsSUFBSSxDQUFDd0IsVUFBVSxFQUFFO01BQ3pDLE9BQU96QixHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO1FBQUVDLE9BQU8sRUFBRTtNQUErQixDQUFDLENBQUM7SUFDNUU7O0lBRUE7SUFDQSxNQUFNVSxVQUFVLEdBQUcsTUFBTXZCLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztJQUMxRCxNQUFNd0IsY0FBYyxHQUFHRCxVQUFVLENBQUNkLElBQUksQ0FBQ2dCLFFBQVEsSUFBSUEsUUFBUSxDQUFDSixVQUFVLEtBQUtBLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDeEYsSUFBSSxDQUFDRyxjQUFjLEVBQUU7TUFDakIsT0FBT3BCLEdBQUcsQ0FBQ08sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7UUFBRUMsT0FBTyxFQUFFO01BQStDLENBQUMsQ0FBQztJQUM1Rjs7SUFFQTtJQUNBLE1BQU1pQixPQUFPLEdBQUcsTUFBTTlCLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQzs7SUFFcEQ7SUFDQSxNQUFNK0IsY0FBYyxHQUFHRCxPQUFPLENBQUNFLElBQUksQ0FBQ2YsTUFBTSxJQUFJQSxNQUFNLENBQUNaLFFBQVEsS0FBS0EsUUFBUSxJQUFJWSxNQUFNLENBQUNJLFVBQVUsS0FBS0EsVUFBVSxDQUFDO0lBQy9HLElBQUlVLGNBQWMsRUFBRTtNQUNoQixPQUFPM0IsR0FBRyxDQUFDTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztRQUFFQyxPQUFPLEVBQUU7TUFBb0QsQ0FBQyxDQUFDO0lBQ2pHO0lBRUEsTUFBTW9CLFNBQVMsR0FBRyxJQUFJckMsT0FBTyxDQUFDeUIsVUFBVSxFQUFFaEIsUUFBUSxFQUFFd0IsVUFBVSxDQUFDO0lBQy9EO0lBQ0FDLE9BQU8sQ0FBQ0ksSUFBSSxDQUFDRCxTQUFTLENBQUM7SUFDdkI7SUFDQSxNQUFNRSxhQUFhLEdBQUcsTUFBTWxDLFNBQVMsQ0FBQ2dDLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQztJQUN0RTs7SUFFQSxPQUFPN0IsR0FBRyxDQUFDTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQ3VCLGFBQWEsQ0FBQztFQUM5QyxDQUFDLENBQUMsT0FBT2pCLEtBQUssRUFBRTtJQUNaQyxPQUFPLENBQUNELEtBQUssQ0FBQyxRQUFRLEVBQUVBLEtBQUssQ0FBQztJQUM5QixPQUFPZCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO01BQUVDLE9BQU8sRUFBRTtJQUE2QyxDQUFDLENBQUM7RUFDMUY7QUFDSjtBQUVBLGVBQWV1QixVQUFVQSxDQUFDakMsR0FBRyxFQUFFQyxHQUFHLEVBQUU7RUFDaEMsSUFBSTtJQUNBLE1BQU1pQixVQUFVLEdBQUdsQixHQUFHLENBQUN5QixJQUFJLENBQUNQLFVBQVU7SUFDdEMsTUFBTWhCLFFBQVEsR0FBR0YsR0FBRyxDQUFDeUIsSUFBSSxDQUFDdkIsUUFBUTtJQUNsQyxNQUFNZ0MsVUFBVSxHQUFHbEMsR0FBRyxDQUFDeUIsSUFBSSxDQUFDWCxNQUFNOztJQUVsQztJQUNBLElBQUksQ0FBQ29CLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRTtNQUNwQixPQUFPbEMsR0FBRyxDQUFDTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztRQUFFQyxPQUFPLEVBQUU7TUFBK0IsQ0FBQyxDQUFDO0lBQzVFO0lBRUEsTUFBTUMsVUFBVSxHQUFHLE1BQU1kLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQztJQUV2RCxNQUFNdUMsV0FBVyxHQUFHekIsVUFBVSxDQUFDMEIsU0FBUyxDQUFDdkIsTUFBTSxJQUMzQ0EsTUFBTSxDQUFDSSxVQUFVLEtBQUtBLFVBQVUsSUFBSUosTUFBTSxDQUFDWixRQUFRLEtBQUtBLFFBQzVELENBQUM7SUFFRCxJQUFJa0MsV0FBVyxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQ3BCO01BQ0EsT0FBT25DLEdBQUcsQ0FBQ08sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7UUFBRUMsT0FBTyxFQUFFO01BQXlCLENBQUMsQ0FBQztJQUN0RTs7SUFFQTtJQUNBQyxVQUFVLENBQUN5QixXQUFXLENBQUMsQ0FBQ3RCLE1BQU0sR0FBR29CLFVBQVU7SUFDM0N2QixVQUFVLENBQUN5QixXQUFXLENBQUMsQ0FBQ0UsVUFBVSxHQUFHLElBQUlDLElBQUksQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBRTlFLE1BQU05QyxFQUFFLENBQUMrQyxTQUFTLENBQUMsb0JBQW9CLEVBQUVDLElBQUksQ0FBQ0MsU0FBUyxDQUFDakMsVUFBVSxDQUFDLEVBQUUsTUFBTSxDQUFDO0lBQzVFLE9BQU9WLEdBQUcsQ0FBQ08sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFBRUMsT0FBTyxFQUFFO0lBQWdDLENBQUMsQ0FBQztFQUU3RSxDQUFDLENBQUMsT0FBT0ssS0FBSyxFQUFFO0lBQ1pDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLFFBQVEsRUFBRUEsS0FBSyxDQUFDO0lBQzlCLE9BQU9kLEdBQUcsQ0FBQ08sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFBRUMsT0FBTyxFQUFFO0lBQXlELENBQUMsQ0FBQztFQUN0RztBQUNKO0FBR0FtQyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUFFdEIsU0FBUztFQUFFUCxvQkFBb0I7RUFBRWxCLGVBQWU7RUFBRWtDO0FBQVcsQ0FBQyJ9
//# sourceMappingURL=data:application/json;charset=utf-8;base64,